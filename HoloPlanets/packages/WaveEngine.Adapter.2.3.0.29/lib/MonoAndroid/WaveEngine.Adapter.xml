<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Adapter</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Adapter.Adapter">
            <summary>
            Represents a graphics adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.GameView">
            <summary>
            Game view.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.MainContext">
            <summary>
            The main context
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.BgContext">
            <summary>
            The bg context
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.fullScreen">
            <summary>
            Holds if the application is run in full screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.originalWidth">
            <summary>
            Original screen width.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.originalHeight">
            <summary>
            Original scren height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Context">
            <summary>
            Android context.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Activity">
            <summary>
            Android Activity.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Window">
            <summary>
            Application window.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.NativeAdVisibilityChanged">
            <summary>
            Occurs when [native ad visibility changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.OnActivityResult">
            <summary>
            Occurs when receive an activity result.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceUniqueID">
            <summary>
            Gets the device unique ID.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AppVersion">
            <summary>
            Gets the app version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OSVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceMake">
            <summary>
            Gets the device make.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.LocaleLanguage">
            <summary>
            Gets the locale language.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.MusicPlayer">
            <summary>
            Gets the music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SoundManager">
            <summary>
            Gets the sound manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Microphone">
            <summary>
            Gets the microphone
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.VideoPlayer">
            <summary>
            Gets the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Guide">
            <summary>
            Gets the guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Vibrate">
            <summary>
            Gets the Vibrate.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InAppPurchase">
            <summary>
            Gets the in app purchases.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.CameraCapture">
            <summary>
            Gets the camera capture.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.PlatformFamily">
            <summary>
            Gets the Platform Cpu architecture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AndroidApiLevel">
            <summary>
            Gets Android API Level
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.FullScreen">
            <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
            <value>
              <c>true</c> if [full screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdapterType">
            <summary>
            Gets the type of the adapter.
            </summary>
            <value>
            The type of the adapter.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>
            The supported orientations.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
            <value>
            The default orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdvertismentVisible">
            <summary>
            Sets a value indicating whether [advertisment visible].
            </summary>
            <value>
              <c>true</c> if [advertisment visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.ListenersFactory">
            <summary>
            Gets the listeners factory.
            </summary>
            <value>
            The listeners factory.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Adapter"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.#ctor(OpenTK.Platform.Android.AndroidGameView,Android.Views.Window,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Adapter"/> class.
            </summary>
            <param name="gameView">The game view.</param>
            <param name="window">The window.</param>
            <param name="screenWidth">Width of the screen.</param>
            <param name="screenHeight">Height of the screen.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.HandleActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)">
            <summary>
            Handle the Activity.OnActivityResult() method
            </summary>
            <param name="requestCode">The request code</param>
            <param name="resultCode">The result code</param>
            <param name="data">The data</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.InputManager_OnOrientationChanged(System.Object,WaveEngine.Common.Input.OrientationChangedArgs)">
            <summary>
            Inputs the manager_ on orientation changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GetUserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <returns>User agent value.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Adapter.Application">
            <summary>
            Represent a base application in WaveEngine, you need inherit of it for a new WaveEngine application.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.View">
            <summary>
            Gets or sets the gl view.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Activity">
            <summary>
            Gets the Android activity
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.LayoutId">
            <summary>
            Gets or sets the app layout
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.fullScreen">
            <summary>
            The full screen
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Adapter">
            <summary>
            Gets the parent adapter needed to initialize the application.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.WindowTitle">
            <summary>
            Gets the title of the application window, when available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Width">
            <summary>
            Gets the width, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Height">
            <summary>
            Gets the height, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.defaultOrientation">
            <summary>
            The default orientation
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>
            The supported orientations.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Application.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
            <value>
            The default orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Application.SkipDefaultSplash">
            <summary>
            Gets or sets a value indicating whether [default splash active].
            </summary>
            <value>
              <c>true</c> if [default splash active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Initialize">
            <summary>
            Called just after creating the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Update(System.TimeSpan)">
            <summary>
            Called when updating the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last update.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Draw(System.TimeSpan)">
            <summary>
            Called when drawing the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last draw.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnCreate(Android.OS.Bundle)">
            <summary>
              <i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i>
            </summary>
            <param name="savedInstanceState">If the activity is being re-initialized after
            previously being shut down then this Bundle contains the data it most
            recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.  <format type="text/html"><b><i>Note: Otherwise it is null.</i></b></format></param>
            <since version="Added in API level 1" />
            <remarks>
              <para />Called when the activity is starting.  This is where most initialization
            should go: calling <c><see cref="M:Android.App.Activity.SetContentView(System.Int32)" /></c> to inflate the
            activity's UI, using <c><see cref="M:Android.App.Activity.FindViewById(System.Int32)" /></c> to programmatically interact
            with widgets in the UI, calling
              <c><see cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" /></c> to retrieve
            cursors for data being displayed, etc.
              <para>You can call <c><see cref="M:Android.App.Activity.Finish" /></c> from within this function, in
            which case onDestroy() will be immediately called without any of the rest
            of the activity lifecycle (<c><see cref="M:Android.App.Activity.OnStart" /></c>, <c><see cref="M:Android.App.Activity.OnResume" /></c>,
              <c><see cref="M:Android.App.Activity.OnPause" /></c>, etc) executing.
              <para><i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i></para></para><para><format type="text/html"><a href="http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnPause">
            <summary>
              <i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i>
            </summary>
            <since version="Added in API level 1" />
            <remarks>
              <para />Called as part of the activity lifecycle when an activity is going into
            the background, but has not (yet) been killed.  The counterpart to
              <c><see cref="M:Android.App.Activity.OnResume" /></c>.
              <para />When activity B is launched in front of activity A, this callback will
            be invoked on A.  B will not be created until A's <c><see cref="M:Android.App.Activity.OnPause" /></c> returns,
            so be sure to not do anything lengthy here.
              <para />This callback is mostly used for saving any persistent state the
            activity is editing, to present a "edit in place" model to the user and
            making sure nothing is lost if there are not enough resources to start
            the new activity without first killing this one.  This is also a good
            place to do things like stop animations and other things that consume a
            noticeable amount of CPU in order to make the switch to the next activity
            as fast as possible, or to close resources that are exclusive access
            such as the camera.
              <para />In situations where the system needs more memory it may kill paused
            processes to reclaim resources.  Because of this, you should be sure
            that all of your state is saved by the time you return from
            this function.  In general <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> is used to save
            per-instance state in the activity and this method is used to store
            global persistent data (in content providers, files, etc.)
              <para>After receiving this call you will usually receive a following call
            to <c><see cref="M:Android.App.Activity.OnStop" /></c> (after the next activity has been resumed and
            displayed), however in some cases there will be a direct call back to
              <c><see cref="M:Android.App.Activity.OnResume" /></c> without going through the stopped state.
              <para><i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i></para></para><para><format type="text/html"><a href="http://developer.android.com/reference/android/app/Activity.html#onPause()" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnResume">
            <summary>
              <i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i>
            </summary>
            <since version="Added in API level 1" />
            <remarks>
              <para />Called after <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>, <c><see cref="M:Android.App.Activity.OnRestart" /></c>, or
              <c><see cref="M:Android.App.Activity.OnPause" /></c>, for your activity to start interacting with the user.
            This is a good place to begin animations, open exclusive-access devices
            (such as the camera), etc.
              <para>Keep in mind that onResume is not the best indicator that your activity
            is visible to the user; a system window such as the keyguard may be in
            front.  Use <c><see cref="M:Android.App.Activity.OnWindowFocusChanged(System.Boolean)" /></c> to know for certain that your
            activity is visible to the user (for example, to resume a game).
              <para><i>Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.</i></para></para><para><format type="text/html"><a href="http://developer.android.com/reference/android/app/Activity.html#onResume()" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)">
            <summary>
            Other additional default key handling may be performed
            if configured with <c><see cref="M:Android.App.Activity.SetDefaultKeyMode(Android.App.DefaultKey)" /></c>.
            </summary>
            <param name="keyCode">The value in event.getKeyCode().</param>
            <param name="e">Description of the key event.</param>
            <returns>
              <list type="bullet">
              <item>
              <term>Return <c>true</c> to prevent this event from being propagated
            further, or <c>false</c> to indicate that you have not handled
            this event and it should continue to be propagated.</term>
              </item>
              </list>
            </returns>
            <since version="Added in API level 1" />
            <remarks>
              <para />Called when a key was pressed down and not handled by any of the views
            inside of the activity. So, for example, key presses while the cursor
            is inside a TextView will not trigger the event (unless it is a navigation
            to another object) because TextView handles its own key presses.
              <para />If the focused view didn't want this event, this method is called.
              <para />The default implementation takes care of <c><see cref="F:Android.Views.Keycode.Back" /></c>
            by calling <c><see cref="M:Android.App.Activity.OnBackPressed" /></c>, though the behavior varies based
            on the application compatibility mode: for
              <c><see cref="F:Android.OS.Build.VERSION_CODES.Eclair" /></c> or later applications,
            it will set up the dispatch to call <c><see cref="M:Android.App.Activity.OnKeyUp(Android.Views.Keycode, Android.Views.KeyEvent)" /></c> where the action
            will be performed; for earlier applications, it will perform the
            action immediately in on-down, as those versions of the platform
            behaved.
              <para>Other additional default key handling may be performed
            if configured with <c><see cref="M:Android.App.Activity.SetDefaultKeyMode(Android.App.DefaultKey)" /></c>.</para><para><format type="text/html"><a href="http://developer.android.com/reference/android/app/Activity.html#onKeyDown(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)">
            <summary>
            The default implementation handles KEYCODE_BACK to stop the activity
            and go back.
            </summary>
            <param name="keyCode">The value in event.getKeyCode().</param>
            <param name="e">Description of the key event.</param>
            <returns>
              <list type="bullet">
              <item>
              <term>Return <c>true</c> to prevent this event from being propagated
            further, or <c>false</c> to indicate that you have not handled
            this event and it should continue to be propagated.</term>
              </item>
              </list>
            </returns>
            <since version="Added in API level 1" />
            <remarks>
              <para />Called when a key was released and not handled by any of the views
            inside of the activity. So, for example, key presses while the cursor
            is inside a TextView will not trigger the event (unless it is a navigation
            to another object) because TextView handles its own key presses.
              <para>The default implementation handles KEYCODE_BACK to stop the activity
            and go back.</para><para><format type="text/html"><a href="http://developer.android.com/reference/android/app/Activity.html#onKeyUp(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnConfigurationChanged(Android.Content.Res.Configuration)">
            <summary>
            Called by the system when the device configuration changes while your
            activity is running.
            </summary>
            <param name="newConfig">The new device configuration.</param>
            <since version="Added in API level 1" />
            <remarks>
              <para tool="javadoc-to-mdoc">Called by the system when the device configuration changes while your
            activity is running.  Note that this will <i>only</i> be called if
            you have selected configurations you would like to handle with the
              <c><see cref="F:Android.Resource.Attribute.ConfigChanges" /></c> attribute in your manifest.  If
            any configuration change occurs that is not selected to be reported
            by that attribute, then instead of reporting it the system will stop
            and restart the activity (to have it launched with the new
            configuration).
              </para>
              <para tool="javadoc-to-mdoc">At the time that this function has been called, your Resources
            object will have been updated to return resource values matching the
            new configuration.</para>
              <para tool="javadoc-to-mdoc">
              <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
              </format>
              </para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)">
            <summary>
            Handle the Activity.OnActivityResult() method
            </summary>
            <param name="requestCode">The request code</param>
            <param name="resultCode">The result code</param>
            <param name="data">The data</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.GetNativeOrientation(WaveEngine.Common.Input.DisplayOrientation)">
            <summary>
            Gets the native orientation.
            </summary>
            <param name="orientation">The orientation.</param>
            <returns></returns>
        </member>
        <member name="T:WaveEngine.Adapter.ChangeViewCountDown">
            <summary>
            Implements a timer that changes from the splash screen to the game activity.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.ChangeViewCountDown.activity">
            <summary>
            The activity.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.ChangeViewCountDown.viewId">
            <summary>
            The view id.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.ChangeViewCountDown.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.ChangeViewCountDown.#ctor(System.Int64,System.Int64,Android.App.Activity,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.ChangeViewCountDown"/> class.
            </summary>
            <param name="millisInFuture">The millis in future.</param>
            <param name="countDownInterval">The count down interval.</param>
            <param name="activity">The activity.</param>
            <param name="viewId">The new view.</param>
        </member>
        <member name="M:WaveEngine.Adapter.ChangeViewCountDown.#ctor(System.Int64,System.Int64,Android.App.Activity,Android.Views.View)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.ChangeViewCountDown"/> class.
            </summary>
            <param name="millisInFuture">The millis in future.</param>
            <param name="countDownInterval">The count down interval.</param>
            <param name="activity">The activity.</param>
            <param name="view">The new view.</param>
        </member>
        <member name="M:WaveEngine.Adapter.ChangeViewCountDown.OnFinish">
            <summary>
            Callback fired when the time is up.
            </summary>
            <since version="Added in API level 1" />
            <remarks>
              <para>Callback fired when the time is up.
              </para>
              <para>
              <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/CountDownTimer.html#onFinish()" target="_blank">[Android Documentation]</a>
              </format>
              </para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.ChangeViewCountDown.OnTick(System.Int64)">
            <summary>
            Callback fired on regular interval.
            </summary>
            <param name="millisUntilFinished">The amount of time until finished.</param>
            <since version="Added in API level 1" />
            <remarks>
              <para>Callback fired on regular interval.</para>
              <para>
              <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/CountDownTimer.html#onTick(long)" target="_blank">[Android Documentation]</a>
              </format>
              </para>
            </remarks>
        </member>
        <member name="T:WaveEngine.Adapter.GLView">
            <summary>
            Reperesents the OpenGL view that will draw everything.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.window">
            <summary>
            The window
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.updateTime">
            <summary>
            The update time
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.GLView.Adapter">
            <summary>
            Gets the adapter.
            </summary>
            <value>
            The adapter.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.GLView"/> class.
            </summary>
            <param name="context">View context</param>
            <param name="attrs">View attributes</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.CreateFrameBuffer">
            <summary>
            Create framebuffer
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Called when [unhandled exception].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnLoad(System.EventArgs)">
            <summary>
            This gets called when the drawing surface has been created
            There is already a GraphicsContext and Surface at this point,
            following the standard OpenTK/GameWindow logic
            
            Android will only render when it refreshes the surface for
            the first time, so if you don't call Run, you need to hook
            up the Resize delegate or override the OnResize event to
            get the updated bounds and re-call your rendering code.
            
            This will also allow non-Run-loop code to update the screen
            when the device is rotated.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnUpdateFrame(OpenTK.FrameEventArgs)">
            <summary>
            Raises the
            <see cref="E:OpenTK.Platform.Android.AndroidGameView.UpdateFrame" />
            event.
            </summary>
            <param name="e">An <see cref="T:OpenTK.FrameEventArgs" /> that contains the event data.</param>
            <remarks>
              <para>
            The <c>OnUpdateFrame</c> method also allows derived classes to handle
            the event without attaching a delegate.  This is the preferred
            technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
            When overriding <c>OnUpdateFrame</c> in a derived class, be sure to
            call the base class's <c>OnUpdateFrame</c> method so that registered
            delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnRenderFrame(OpenTK.FrameEventArgs)">
            <summary>
            Raises the
            <see cref="E:OpenTK.Platform.Android.AndroidGameView.RenderFrame" />
            event.
            </summary>
            <param name="e">An <see cref="T:OpenTK.FrameEventArgs" /> that contains the event data.</param>
            <remarks>
              <para>
            The <c>OnRenderFrame</c> method also allows derived classes to handle
            the event without attaching a delegate.  This is the preferred
            technique for handling the event in a derived class.
              </para>
              <block subset="none" type="overrides">
            When overriding <c>OnRenderFrame</c> in a derived class, be sure to
            call the base class's <c>OnRenderFrame</c> method so that registered
            delegates receive the event.
              </block>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)">
            <summary>
            Key presses in software keyboards will generally NOT trigger this listener,
            although some may elect to do so in some situations.
            </summary>
            <param name="keyCode">A key code that represents the button pressed, from
            <c><see cref="T:Android.Views.KeyEvent" /></c>.</param>
            <param name="e">The KeyEvent object that defines the button action.</param>
            <returns>
              <list type="bullet">
              <item>
              <term>If you handled the event, return true.  If you want to allow
            the event to be handled by the next receiver, return false.
              </term>
              </item>
              </list>
            </returns>
            <since version="Added in API level 1" />
            <remarks>
              <para />Default implementation of <c><see cref="M:Android.Views.KeyEvent.ICallback.OnKeyDown(Android.Views.Keycode, Android.Views.KeyEvent)" /></c>: perform press of the view
            when <c><see cref="F:Android.Views.Keycode.DpadCenter" /></c> or <c><see cref="F:Android.Views.Keycode.Enter" /></c>
            is released, if the view is enabled and clickable.
              <para>Key presses in software keyboards will generally NOT trigger this listener,
            although some may elect to do so in some situations. Do not rely on this to
            catch software key presses.</para><para><format type="text/html"><a href="http://developer.android.com/reference/android/view/View.html#onKeyDown(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)">
            <summary>
            Key presses in software keyboards will generally NOT trigger this listener,
            although some may elect to do so in some situations.
            </summary>
            <param name="keyCode">A key code that represents the button pressed, from
            <c><see cref="T:Android.Views.KeyEvent" /></c>.</param>
            <param name="e">The KeyEvent object that defines the button action.</param>
            <returns>
              <list type="bullet">
              <item>
              <term>If you handled the event, return true.  If you want to allow
            the event to be handled by the next receiver, return false.
              </term>
              </item>
              </list>
            </returns>
            <since version="Added in API level 1" />
            <remarks>
              <para />Default implementation of <c><see cref="M:Android.Views.KeyEvent.ICallback.OnKeyUp(Android.Views.Keycode, Android.Views.KeyEvent)" /></c>: perform clicking of the view
            when <c><see cref="F:Android.Views.Keycode.DpadCenter" /></c> or
              <c><see cref="F:Android.Views.Keycode.Enter" /></c> is released.
              <para>Key presses in software keyboards will generally NOT trigger this listener,
            although some may elect to do so in some situations. Do not rely on this to
            catch software key presses.</para><para><format type="text/html"><a href="http://developer.android.com/reference/android/view/View.html#onKeyUp(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a></format></para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            Implement this method to handle touch screen motion events.
            </summary>
            <param name="e">The motion event.</param>
            <returns>
              <list type="bullet">
              <item>
              <term>True if the event was handled, false otherwise.
              </term>
              </item>
              </list>
            </returns>
            <since version="Added in API level 1" />
            <remarks>
              <para>Implement this method to handle touch screen motion events.</para>
              <para>
              <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
              </format>
              </para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.Resume">
            <summary>
            Resume the view
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.Pause">
            <summary>
            Pauses the view.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Guide">
            <summary>
            Provides access to guide services.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Guide.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Guide.taskResult">
            <summary>
            The task result
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.IsTrialMode">
            <summary>
            Gets a value indicating whether this instance is trial mode.
            </summary>
            <value>
                <c>true</c> if this instance is trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether [simulate trial mode].
            </summary>
            <value>
              <c>true</c> if [simulate trial mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Guide"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the show keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends the show keyboard input.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Resulting text.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.BeginShowMessageBox(System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the show message box.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="callback">The callback.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.EndShowMessageBox(System.IAsyncResult)">
            <summary>
            Ends the show message box.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Result of the message box.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously 
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <returns>The index of the option selected</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.OnEditorAction(Android.Widget.TextView,Android.Views.InputMethods.ImeAction,Android.Views.KeyEvent)">
            <summary>
            Called when [editor action].
            </summary>
            <param name="v">The v.</param>
            <param name="actionId">The action identifier.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Handle">
            <summary>
            Gets the JNI value of the underlying Android object.
            </summary>
            <value>
            A <see cref="T:System.IntPtr" /> containing the JNI handle for an
            object instance within the Java VM.
            </value>
            <exception cref="!:System.NotImplementedException"></exception>
            <remarks>
            NEVER IMPLEMENT THIS PROPERTY YOURSELF. Implement the
            <c>Handle</c> property by inheriting from
            <see cref="T:Java.Lang.Object" />. See the
            <format type="text/html"><a href="http://docs.xamarin.com/android/advanced_topics/Working_With_JNI#Implementing_Interfaces">Android Callable Wrappers documentation</a></format>
            for more information.
            </remarks>
        </member>
        <member name="T:WaveEngine.Adapter.IAndroidApplication">
            <summary>
            Android Adapter Extension
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.IAndroidApplication.Activity">
            <summary>
            The android activity
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.IAndroidApplication.Window">
            <summary>
            Gets the window.
            </summary>
            <value>
            The window.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.IAndroidApplication.View">
            <summary>
            The Gl view
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AccelerometerListener">
            <summary>
            Accelerometer listener
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.listener">
            <summary>
            The listener for android
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.sensorManager">
            <summary>
            The sensor manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.sensor">
            <summary>
            The sensor
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.lastSensorTime">
            <summary>
            Last read of the sensor.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.rawAccelerometerValue">
            <summary>
            Raw accelerometer value.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.smoothAccelerometerValue">
            <summary>
            Smoothed accelerometer value.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.smoothing">
            <summary>
            Amount of sensor smoothing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.window">
            <summary>
            The window
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.axisSignusCorrection">
            <summary>
            The axis siguns correction
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.accelerationGForce">
            <summary>
            GForce convertion factor
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.#ctor(Android.Views.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.AccelerometerListener"/> class.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if accelerometer exist.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Register">
            <summary>
            Registers the events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Unregister">
            <summary>
            Uns the register events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>
            The state of the accelerometer
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Listener_AccelerometerChanged(System.Object,WaveEngine.Adapter.Input.AccelerometerEventArgs)">
            <summary>
            Handles the AccelerometerChanged event of the listener control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Adapter.Input.AccelerometerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.CompassEventArgs">
            <summary>
            Stores the info for a compass changed event.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassEventArgs.Value">
            <summary>
            CompassState value.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassEventArgs.Timestamp">
            <summary>
            Timestamp value.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AndroidCompassListener">
            <summary>
            Listens for accelerometer changes.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.AndroidCompassListener.CompassChanged">
            <summary>
            Occurs when [compass changed].
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidCompassListener.OnAccuracyChanged(Android.Hardware.Sensor,System.Int32)">
            <summary>
            Called when [accuracy changed].
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="accuracy">The accuracy.</param>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidCompassListener.compassEventParam">
            <summary>
            The accelerometer event param
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidCompassListener.OnSensorChanged(Android.Hardware.SensorEvent)">
            <summary>
               <format type="text/html">
                    <b>NOTE:</b>
               </format> The application doesn't own the
            <c><see cref="T:Android.Hardware.SensorEvent"/></c>
            object passed as a parameter and therefore cannot hold on o it.
            </summary>
            <param name="e">the <c><see cref="T:Android.Hardware.SensorEvent"/></c>.</param>
            <since version="API Level 3"/>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidCompassListener.OnAccuracyChanged(Android.Hardware.Sensor,Android.Hardware.SensorStatus)">
            <summary>
            See <c><see cref="T:Android.Hardware.SensorManager"/></c>
            for details.
            </summary>
            <param name="sensor">To be added.</param>
            <param name="accuracy">The new accuracy of this sensor</param>
            <since version="API Level 3"/>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AccelerometerEventArgs">
            <summary>
            Stores the info for an accelerometer changed event.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerEventArgs.Value">
            <summary>
            Accelerometer value.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerEventArgs.Timestamp">
            <summary>
            Timestamp value.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AndroidAccelerometerListener">
            <summary>
            Listens for accelerometer changes.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.AndroidAccelerometerListener.AccelerometerChanged">
            <summary>
            Occurs when [accelerometer changed].
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidAccelerometerListener.OnAccuracyChanged(Android.Hardware.Sensor,System.Int32)">
            <summary>
            Called when [accuracy changed].
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="accuracy">The accuracy.</param>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidAccelerometerListener.accelerometerEventParam">
            <summary>
            The accelerometer event param
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidAccelerometerListener.OnSensorChanged(Android.Hardware.SensorEvent)">
            <summary>
               <format type="text/html">
                    <b>NOTE:</b>
               </format> The application doesn't own the
            <c><see cref="T:Android.Hardware.SensorEvent"/></c>
            object passed as a parameter and therefore cannot hold on o it.
            </summary>
            <param name="e">the <c><see cref="T:Android.Hardware.SensorEvent"/></c>.</param>
            <since version="API Level 3"/>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidAccelerometerListener.OnAccuracyChanged(Android.Hardware.Sensor,Android.Hardware.SensorStatus)">
            <summary>
            See <c><see cref="T:Android.Hardware.SensorManager"/></c>
            for details.
            </summary>
            <param name="sensor">To be added.</param>
            <param name="accuracy">The new accuracy of this sensor</param>
            <since version="API Level 3"/>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.rawQuaternion">
            <summary>
            Raw quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.preFix">
            <summary>
            Quaternion prefix
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.Orientation">
            <summary>
            Gets the current orientation
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.OnAccuracyChanged(Android.Hardware.Sensor,Android.Hardware.SensorStatus)">
            <summary>
            Called when [accuracy changed].
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="accuracy">The accuracy.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationQuaternionListener.OnSensorChanged(Android.Hardware.SensorEvent)">
            <summary>
               <format type="text/html">
                    <b>NOTE:</b>
               </format> The application doesn't own the
            <c><see cref="T:Android.Hardware.SensorEvent"/></c>
            object passed as a parameter and therefore cannot hold on o it.
            </summary>
            <param name="e">the <c><see cref="T:Android.Hardware.SensorEvent"/></c>.</param>
            <since version="API Level 3"/>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidRotationVectorListener.rawQuaternion">
            <summary>
            Raw quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidRotationVectorListener.preFix">
            <summary>
            Quaternion prefix
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidRotationVectorListener.postFix">
            <summary>
            Quaternion postFix
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Input.AndroidRotationVectorListener.Orientation">
            <summary>
            Gets the current orientation
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationVectorListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.AndroidRotationVectorListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationVectorListener.OnAccuracyChanged(Android.Hardware.Sensor,Android.Hardware.SensorStatus)">
            <summary>
            Called when [accuracy changed].
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="accuracy">The accuracy.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidRotationVectorListener.OnSensorChanged(Android.Hardware.SensorEvent)">
            <summary>
               <format type="text/html">
                    <b>NOTE:</b>
               </format> The application doesn't own the
            <c><see cref="T:Android.Hardware.SensorEvent"/></c>
            object passed as a parameter and therefore cannot hold on o it.
            </summary>
            <param name="e">the <c><see cref="T:Android.Hardware.SensorEvent"/></c>.</param>
            <since version="API Level 3"/>
        </member>
        <member name="P:WaveEngine.Adapter.Input.IAndroidMotionListener.Orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.GameRotationVector">
            <summary>
            Constants associated to the Game Rotation Vector in Android API.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="E:WaveEngine.Adapter.Input.AndroidGyroscopeListener.GyroscopeChanged">
            <summary>
            Occurs when [gyroscope changed].
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AndroidGyroscopeListener.gyroscopeEventParam">
            <summary>
            The gyroscope event param
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidGyroscopeListener.OnAccuracyChanged(Android.Hardware.Sensor,Android.Hardware.SensorStatus)">
            <summary>
            Called when [accuracy changed].
            </summary>
            <param name="sensor">The sensor.</param>
            <param name="accuracy">The accuracy.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AndroidGyroscopeListener.OnSensorChanged(Android.Hardware.SensorEvent)">
            <summary>
               <format type="text/html">
                    <b>NOTE:</b>
               </format> The application doesn't own the
            <c><see cref="T:Android.Hardware.SensorEvent"/></c>
            object passed as a parameter and therefore cannot hold on o it.
            </summary>
            <param name="e">the <c><see cref="T:Android.Hardware.SensorEvent"/></c>.</param>
            <since version="API Level 3"/>
        </member>
        <member name="T:WaveEngine.Adapter.Input.GyroscopeEventArgs">
            <summary>
            Stores the info for an gyroscope changed event.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeEventArgs.Value">
            <summary>
            Gyroscope value.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeEventArgs.Timestamp">
            <summary>
            Timestamp value.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.InputManager">
            <summary>
            Manages input devices.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnOrientationChanged">
            <summary>
            Occurs when [on orientation changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnInputChanged">
            <summary>
            Occur when a nen device is detected.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.sensorManager">
            <summary>
            Sensor manager.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor(WaveEngineAndroid.Adapter.IAndroidAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>
            Keyboard state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>
            Mouse state.
            </returns>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.GamePadState">
            <summary>
            Holds the state of the gamepad.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Games the state of the pad get.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>
            Game pad state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.TouchPanelState">
            <summary>
            Holds the state of the touch panel.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.TouchPanelGetState">
            <summary>
            Touches the state of the panel get.
            </summary>
            <returns>
            Touch panel state.
            </returns>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.displayState">
            <summary>
            The display state
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.DisplayOrientationGetState">
            <summary>
            Displays the state of the orientation get.
            </summary>
            <returns>
            Display orientation state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.ListenersFactoryAndroid">
            <summary>
            Sensor Factory for Android
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.ListenersFactoryAndroid.#ctor(Android.Views.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.ListenersFactoryAndroid"/> class.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.Vibrate">
            <summary>
            Vibrate interface
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.Vibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate device for specified amount of time
            </summary>
            <param name="milliseconds">Time in milliseconds to vibrate device (500ms is default).</param>
        </member>
        <member name="T:WaveEngine.Adapter.IO.IOManager">
            <summary>
            Input/Output manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.storageFile">
            <summary>
            Storage file instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.IO.IOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.IO.IOManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsContentFile(System.String)">
            <summary>
            Contents the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.StorageFileExists(System.String)">
            <summary>
            Storages the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CameraCapture">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.adapter">
            <summary>
            Android Adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.camera">
            <summary>
            Camera manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.hasCameraAndPermission">
            <summary>
            Check if has camera permission
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.surfaceTexture">
            <summary>
            Surface texture for camera preview
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.updateSurface">
            <summary>
            Surface texture is updated
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.isInitialized">
            <summary>
            Camera capture is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.textCoordTransform">
            <summary>
            Surface texture texture transform
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.stMatrix">
            <summary>
            texture transform native
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.recorder">
            <summary>
            Media recorder instance;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.PreviewTexture">
            <summary>
            Gets preview texture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.State">
            <summary>
            Gets camera State
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether camera is available
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.CameraCapture"/> class.
            </summary>
            <param name="adapter">Android adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start capture preview
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Stop">
            <summary>
            Stop camera preview
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StartRecording(System.String)">
            <summary>
            Start record camera to file
            </summary>
            <param name="videoFilePath">path of the file to record</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StopRecording">
            <summary>
            Stop recording the camera
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Update(System.TimeSpan)">
            <summary>
            Update camera
            </summary>
            <param name="gameTime">Game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.System#IDisposable#Dispose">
            <summary>
            Dispose camera
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Initialize">
            <summary>
            Initialize video player
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.CaptureTypeToCameraFacing(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Convert Wave capture type to Android API camera facing
            </summary>
            <param name="captureType">capture type</param>
            <returns>camera facing</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.GetCameraId(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Get camera id from camera type
            </summary>
            <param name="cameraType">camera id</param>
            <returns>camera Id</returns>
        </member>
        <member name="T:WaveEngine.Adapter.Media.LazyCameraCapture">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.cameraCapture">
            <summary>
            Lazy initialization class of Camera capture. This class avoid the load of WavEngine.Adapter.Video assembly if cameraCapture is not used
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.CameraCapture">
            <summary>
            Gets a value indicationg the internal camera capture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.IsCameraSupported">
            <summary>
            Gets a flag indicating if camera texture is supported on this device
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.PreviewTexture">
            <summary>
            Gets a preview texture;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.LazyCameraCapture"/> class.
            </summary>
            <param name="adapter">Windows adapter instance</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start capture preview
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Stop">
            <summary>
            Stop preview
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.StartRecording(System.String)">
            <summary>
            Start recording
            </summary>
            <param name="videoFilePath">video file.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.StopRecording">
            <summary>
            Stop recording
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Update(System.TimeSpan)">
            <summary>
            Update Camera capture
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.System#IDisposable#Dispose">
            <summary>
            IVideoPlayer Dispose Camera capture
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.LazyVideoPlayer">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyVideoPlayer.videoPlayer">
            <summary>
            Lazy initialization class of Video player. This class avoid the load of WavEngine.Adapter.Video assembly if videoplayer is not used
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyVideoPlayer.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoPlayer">
            <summary>
            Gets a value indicationg the internal video player
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsVideoSupported">
            <summary>
            Gets a flag indicating if Video texture is supported on this device
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.LazyVideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.LazyVideoPlayer.OnError">
            <summary>
            Event fired when the video play has error
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.LazyVideoPlayer"/> class.
            </summary>
            <param name="adapter">Windows adapter instance</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.System#IDisposable#Dispose">
            <summary>
            IVideoPlayer Dispose video player
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone">
            <summary>
            Manages a microphone device.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.SAMPLERATE">
            <summary>
            Sample rate of the audio.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.CHANNELS">
            <summary>
            Channel info of the audio.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.ENCODING">
            <summary>
            Encoding format of the audio.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.Microphone.DataAvailable">
            <summary>
            Event launched when there is recording data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is currently recording
            </summary>
            <value>
                <c>true</c> if this instance is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone on the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.adapter">
            <summary>
            Adapte of the microphone.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recorder">
            <summary>
            Audio recorder.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.buffer">
            <summary>
            Byte buffer to receive audio.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordFormat">
            <summary>
            Format of the recorder.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.writer">
            <summary>
            Wave file writer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.currentSoundHandle">
            <summary>
            Current sound handle.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordSoundPath">
            <summary>
            Record sound path.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordedSound">
            <summary>
            Recorded sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.bufferSize">
            <summary>
            Size of the buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.Microphone"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start(System.String)">
            <summary>
            Starts the record
            </summary>
            <param name="recordSoundPath">Path of the recorded sound</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.GetRecordedSound">
            <summary>
            Get a soundbase object
            </summary>
            <returns>
            The recorded sound.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.DestroyRecordedSound">
            <summary>
            Delete the recorded sound ( if any )
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.ReadLoop(System.Object)">
            <summary>
            Read loop that gets the audio data and sends events.
            </summary>
            <param name="obj">Loop parameter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.WriteToFile(System.Byte[],System.Int32)">
            <summary>
            Writes the current buffer into the WAV file.
            </summary>
            <param name="buffer">Byte buffer of the recorded audio.</param>
            <param name="bytesReaded">Bytes readed on the buffer.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.MusicPlayer">
            <summary>
            Manages music playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.player">
            <summary>
            Android media player instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.unmutedVolume">
            <summary>
            Volume before muting.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.currentVolume">
            <summary>
            Current volume.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.playerState">
            <summary>
            Player state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.isMuted">
            <summary>
            This instance is muted
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.isRepeat">
            <summary>
            The sound can repeat
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.MusicPlayer"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.PlaySong(System.String)">
            <summary>
            Plays the song.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified song.
            </summary>
            <param name="song">The song.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.HandleCompletion(System.Object,System.EventArgs)">
            <summary>
            Handles the music completion.
            </summary>
            <param name="sender">The Sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Dispose">
            <summary>
            To be added.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.VideoInfo">
            <summary>
            Video info instance
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.VideoInfo"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoInfo.Dispose">
            <summary>
            Dispose video info instance
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.VideoPlayer">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.isInitialized">
            <summary>
            indicates if video player is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.adapter">
            <summary>
            Android adapter instance
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.video">
            <summary>
            Video info instance
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.updateSurface">
            <summary>
            Flag that indicate if texture surface nned to be updated
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.mediaPlayer">
            <summary>
            Media player instance
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.currentAssetFileDescriptor">
            <summary>
            The current Asset file descriptor
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.surfaceTexture">
            <summary>
            Video surface texture (API 11)
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsVideoSupported">
            <summary>
            Gets a flag indicating if Video texture is supported on this device
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.onComplete">
            <summary>
            Internal complete event handler
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.VideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.onError">
            <summary>
            Internal error event handler
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.VideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.VideoPlayer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Initialize">
            <summary>
            Initialize video player
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.CloseFileDescriptor">
            <summary>
            Close the file descriptor
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.OnFrameAvailable(System.Object,Android.Graphics.SurfaceTexture.FrameAvailableEventArgs)">
            <summary>
            A new frame is available
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.CreateTexture">
            <summary>
            Create video texture
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.MediaPlayer_Error(System.Object,Android.Media.MediaPlayer.ErrorEventArgs)">
            <summary>
            MediaPlayer completion handle
            </summary>
            <param name="sender">mediaplayer sender</param>
            <param name="e">event args</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.MediaPlayer_Completion(System.Object,System.EventArgs)">
            <summary>
            MediaPlayer completion handle
            </summary>
            <param name="sender">mediaplayer sender</param>
            <param name="e">event args</param>
        </member>
        <member name="T:WaveEngine.Adapter.System.Stopwatch">
            <summary>
            Class for representing a stop watch.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.System.Stopwatch.stopwatch">
            <summary>
            Internal Watch object.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.System.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.System.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.System.System">
            <summary>
            Manages system functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.System.System.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.System.System"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.AttributeType">
            <summary>
            GL attribute type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.AttributeType.Uniform">
            <summary>
            Uniform type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.AttributeType.Attribute">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLDepth.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLDepth.DepthHandle">
            <summary>
            Handlde to the OpenGL depth buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.#ctor(WaveEngine.Common.Graphics.IGraphics,WaveEngine.Common.Graphics.DepthTexture,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLRenderTarget"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="texture">The texture.</param>
            <param name="asTexture">Use depth buffer as texture</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.GL_DrawBuffersNV(System.Int32,OpenTK.Graphics.ES30.DrawBufferMode[])">
            <summary>
            C++ memcpy ANSI method wrapper
            </summary>
            <param name="destination">Pointer to the destination array where the content is to be copied, type-casted to a pointer of type void*.</param>
            <param name="source">Pointer to the source of data to be copied, type-casted to a pointer of type const void*.</param>
            <param name="num">Number of bytes to copy.</param>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.FramebufferId">
            <summary>
            Handlde to the OpenGL framebuffer.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.depthAttachmentHandle">
            <summary>
            Current depth attachment handle
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.textureAttachmentHandles">
            <summary>
            Current texture attachment handles
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.textureAttachmentCount">
            <summary>
            Current texture attachment count
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.depthAsTexture">
            <summary>
            Depth as texture
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.isMRTSupported">
            <summary>
            MRT is supported
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.drawBufferAttachments">
            <summary>
            DrawBuffer method attachments
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.GLFramebuffer.DrawBufferDelegate">
            <summary>
            Delegate that specify the GLDrawBuffer method
            </summary>
            <param name="n">The attachment count</param>
            <param name="attachments">The attachment array</param>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.DrawBufferImplementation">
            <summary>
            Draw buffer implementation
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLFramebuffer.DepthAttachmentHandle">
            <summary>
            Gets or sets the Depth Attachment Handle
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLFramebuffer.TextureAttachmentCount">
            <summary>
            Gets or sets the texture count
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLFramebuffer"/> class.
            </summary>
            <param name="depthAsTexture">Depth as texture</param>
            <param name="isMRTSupported">MRT is supported</param>
            <param name="glVersion">OpenGL ES Version</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLFramebuffer"/> class.
            </summary>
            <param name="framebufferId">The framebuffer id.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.SetColorAttachment(System.Int32,System.UInt32)">
            <summary>
            Set color attachment to the current framebuffer
            </summary>
            <param name="slot">The color attachment slot</param>
            <param name="textureHandle">The attached texture</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.UpdateFramebufferStatus">
            <summary>
            Check Framebuffer Status
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLHelpers">
            <summary>
            Helper OpenGL functions.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLHelpers.lastError">
            <summary>
            Last OpenGL error.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLHelpers.extensions">
            <summary>
            GL Extension dictionary
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.CheckError">
            <summary>
            Checks the error.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.CheckGLExtension(System.String)">
            <summary>
            Checks if an OpenGL Extension is available on the current deviv
            </summary>
            <param name="extension">The OpenGL Extension name</param>
            <returns>True if the extension is avaliable</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.AttributePointerSize(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Attributes the size of the pointer.
            </summary>
            <param name="format">The format.</param>
            <returns>Size in bytes of the attribute.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.IndexCount(WaveEngine.Common.Graphics.PrimitiveType,System.Int32)">
            <summary>
            Calcs the index count.
            </summary>
            <param name="numPrimitives">The num primitives.</param>
            <param name="type">Type of the primitive.</param>
            <returns>Number of primitive indices to draw.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.InitExtensionList">
            <summary>
            Initialize extension list
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.GLRenderTarget">
            <summary>
            Implements an OpenGL render target.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.PixelType_Float">
            <summary>
            Original was GL_FLOAT = 0x1406
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.PixelType_HalfFloat">
            <summary>
            Original was GL_HALF_FLOAT = 0x140B
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.textureHandle">
            <summary>
            Internal texture handle.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLRenderTarget.TextureHandle">
            <summary>
            Gets the texture handle.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.#ctor(WaveEngine.Common.Graphics.IGraphics,WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLRenderTarget"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="texture">The texture.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLSLShader">
            <summary>
            Represents an OpenGL shader.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLShader.Techniques">
            <summary>
            Holds the techniques of this shader.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLShader.#ctor(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLSLShader"/> class.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLSLTechnique">
            <summary>
            Represents a GLSL technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ShaderLogLength">
            <summary>
            Maximum log length.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.vertexShaderHandle">
            <summary>
            Vertex program handle.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.fragmentShaderHandle">
            <summary>
            Fragment program handle.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.vertexArrayObjects">
            <summary>
            Vertex array objects used by this technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ProgramHandle">
            <summary>
            Handle of the program.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.VertexShaderSource">
            <summary>
            Vertex shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.FragmentShaderSource">
            <summary>
            Fragment shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.MatrixUniforms">
            <summary>
            Matrix uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ParameterUniforms">
            <summary>
            Parameter uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.TextureUniforms">
            <summary>
            Texture uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.Attributes">
            <summary>
            Stores the attributes of the technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.AttributeLocationByUsageName">
            <summary>
            Stores the attributes location.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.VertexBufferFormat">
            <summary>
            The vertex buffer format
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.#ctor(System.String,System.String,WaveEngine.Common.Graphics.Effect,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLSLTechnique"/> class.
            </summary>
            <param name="vertexShader">The vertex shader.</param>
            <param name="fragmentShader">The fragment shader.</param>
            <param name="effect">The effect.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.AddAttribute(System.String,WaveEngine.OpenGL.ShaderAttribute)">
            <summary>
            Adds the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.SetVertexArrayObject(System.UInt32,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Sets the vertex array object.
            </summary>
            <param name="vertexBufferHandle">The vertex buffer handle.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.FindVertexElementAttributeLocation(WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Finds the vertex element attribute location.
            </summary>
            <param name="properties">The properties.</param>
            <returns>Location of the attribute, -1 if not found.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.CompileShader(OpenTK.Graphics.ES20.ShaderType,System.String,System.String[])">
            <summary>
            Compiles and return a GLSL shader
            </summary>
            <param name="shaderType">The shader type (VS or PS)</param>
            <param name="shaderSource">Source code of the shader</param>
            <param name="symbols">Precompiled</param>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.FillUniforms(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Fill uniforms info
            </summary>
            <param name="effect">The effect</param>
        </member>
        <member name="T:WaveEngine.OpenGL.Graphics">
            <summary>
            Manages all graphical functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.vertexBufferCount">
            <summary>
            Number of vertex buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.indexBufferCount">
            <summary>
            Number of index buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.shaderManager">
            <summary>
            Reference to the shader manager.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedElementProperties">
            <summary>
            Cached vertex element properties.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.vertexArrayObjects">
            <summary>
            Stored vertex array objects.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedClearColor">
            <summary>
            Cached clear color.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedClearDepth">
            <summary>
            Cached clear depth.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.GLVersion">
            <summary>
            OpenGL version used in this application
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.HasVideoSupport">
            <summary>
            Gets the flag indicating if device has video playback support
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.#ctor(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.Graphics"/> class.
            </summary>
            <param name="glVersion">OpenGL Version</param>
            <param name="screenWidth">The screen width.</param>
            <param name="screenHeight">The screen height.</param>
            <param name="framebufferId">The screen framebuffer ID.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="flags">The flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CreateVertexBufferHandle">
            <summary>
            Creates the vertex buffer handle.
            </summary>
            <returns>Vertex buffer handle</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CacheBindVertexBuffer(System.UInt32)">
            <summary>
            Caches the bind vertex buffer.
            </summary>
            <param name="vertexBufferHandle">The vertex buffer handle.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CacheBindIndexBuffer(System.UInt32)">
            <summary>
            Caches the bind index buffer.
            </summary>
            <param name="indexBufferHandle">The index buffer handle.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.RenderState">
            <summary>
            Manages the current render state.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.graphics">
            <summary>
            The graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.cullMode">
            <summary>
            Current cull mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.blendMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.fillMode">
            <summary>
            Current fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthBias">
            <summary>
            The depth bias.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.samplerMode">
            <summary>
            Current sampler mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthTestEnabled">
            <summary>
            Holds if depth test is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.blendEnabled">
            <summary>
            Holds if blend is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthMaskEnabled">
            <summary>
            Hold if depth mask is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldDepthFunc">
            <summary>
            Old depth function.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldBlendSrc">
            <summary>
            Old blend source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldBlendDst">
            <summary>
            Old blend destination.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.viewport">
            <summary>
            Current viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.defaultViewport">
            <summary>
            Default viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.scissorTestEnabled">
            <summary>
            The scissor test enabled
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.scissorRectangle">
            <summary>
            The scissor rectangle
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>The depth bias.</value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.FillMode">
            <summary>
            Gets or sets the Fill mode.
            </summary>
            <value>
            The Fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.SamplerMode">
            <summary>
            Gets or sets the address mode.
            </summary>
            <value>
            The address mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderState.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.RenderState"/> class.
            </summary>
            <param name="adapter">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.RenderTargetManager">
            <summary>
            Manages render targets.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_texture_half_float">
            <summary>
            Name of GL_OES_texture_half_float extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_texture_float">
            <summary>
            Name of GL_OES_texture_float extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_NV_draw_buffers">
            <summary>
            NVidia OpenGL extension that allow MRT on OpenGL ES 2.0 devices
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_depth_texture">
            <summary>
            Name of GL_OES_depth_texture extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_MAX_COLOR_ATTACHMENTS">
            <summary>
            GL_MAX_COLOR_ATTACHMENTS const
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.defaultDepthTexture">
            <summary>
            The default depth texture
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.screenFramebuffer">
            <summary>
            The adapter screen framebuffer
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.offScreenFramebuffer">
            <summary>
            The offscreen framebuffer;
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.currentFramebufferId">
            <summary>
            Current framebuffer ID
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.renderTargetCount">
            <summary>
            Number of render targets created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.depthTextureCount">
            <summary>
            Number of depth texture created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.graphics">
            <summary>
            The Graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.hasFloatTextureSupport">
            <summary>
            Has Float texture support
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.hasHalfFloatTextureSupport">
            <summary>
            Has HalfFloat texture support
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.#ctor(WaveEngine.OpenGL.Graphics,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.RenderTargetManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="screenFramebufferId">The framebuffer ID handle</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depth texture</param>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Render target.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderAttribute">
            <summary>
            Represents a shader attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Format">
            <summary>
            Format of the attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Usage">
            <summary>
            Usage of the attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.UsageIndex">
            <summary>
            Attribute usage index.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Location">
            <summary>
            Attribute location in shader.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderAttribute.#ctor(WaveEngine.Common.Graphics.VertexElementFormat,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="usage">The usage.</param>
            <param name="usageIndex">Index of the usage.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderManager">
            <summary>
            Creates and manages shaders.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderManager.OffsetMap">
            <summary>
            Class for mapping offsets.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.UniformName">
            <summary>
            The uniform name
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.FieldType">
            <summary>
            The field type
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.DefaultLookupIndex">
            <summary>
            Default lookup table index. This is used for all normal textures. Texture 2D, Texture Cube...
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.CubeMapLookupIndex">
            <summary>
            Lookup id for render target textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.RenderTargetLookupIndex">
            <summary>
            Lookup id for render target textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.VideoTextureLookupIndex">
            <summary>
            Lookup id for video textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.DepthTextureLookupIndex">
            <summary>
            Lookup id for depth textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.ActiveShader">
            <summary>
            Current active shader.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.addressModeLokupTable">
            <summary>
            Address mode lookup table
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.graphics">
            <summary>
            The Graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.effects">
            <summary>
            Loaded shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.offsetMappings">
            <summary>
            The offset mappings
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector2Hash">
            <summary>
            The vector2 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector3Hash">
            <summary>
            The vector3 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector4Hash">
            <summary>
            The vector4 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.matrixHash">
            <summary>
            The matrix hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.floatHash">
            <summary>
            The float hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.intHash">
            <summary>
            The int hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.currentTechnique">
            <summary>
            Currently used technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.cachedTechnique">
            <summary>
            The chached technique
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.cachedMaterial">
            <summary>
            The cached material
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.OpenGL.ShaderManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateAddressLookupTable">
            <summary>
            Create the Adress mode lookup table
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>
            true if the technique exists.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the effect.
            </summary>
            <param name="effect">The effect.</param>        
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.ResetCachedMaterial">
            <summary>
            Resets the cached material.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CacheUseProgram(WaveEngine.OpenGL.GLSLTechnique)">
            <summary>
            Caches the use program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetShaderMatrices(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Sets the shader matrices.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetParameters(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateObjectOffsetMap(System.Object)">
            <summary>
            Maps the struct fields.
            </summary>
            <param name="targetObject">The target object.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.GetObjectMappedFields(System.Object,System.String,System.Int32)">
            <summary>
            Gets the object mapped fields.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="fieldPrefix">The field prefix.</param>
            <param name="fieldOffset">The field offset.</param>
            <returns>List of offset maps</returns>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderUniform">
            <summary>
            Represents a shader uniform.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.matrixValue">
            <summary>
            The matrix value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec2Value">
            <summary>
            The vec2 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec3Value">
            <summary>
            The vec3 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec4Value">
            <summary>
            The vec4 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.intValue">
            <summary>
            The int value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.floatValue">
            <summary>
            The float value
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderUniform"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Matrix*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector2*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector3*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector4*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Int32*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Int32)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Single*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.SoundManager">
            <summary>
            Manages everything related to sounds.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.WavHeaderSize">
            <summary>
            WAV Header size (in bytes)
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.WavOffset">
            <summary>
            WAV file End offset
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.soundCount">
            <summary>
            Number of sounds created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.instanceCount">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.lastError">
            <summary>
            OpenAL error instance.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.references">
            <summary>
            Dictionary of sound references.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.pendingResumeInstances">
            <summary>
            The pending resume instances
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.device">
            <summary>
            Audio device.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.context">
            <summary>
            Audio context.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.soundLock">
            <summary>
            Lock for sound uploading.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.isPaused">
            <summary>
            The Sound Manager is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.tempListenerOrientation">
            <summary>
            Temporal 3d orientation vector used to store listener orientation
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.SoundManager.SoundHandles">
            <summary>
            Gets the dictionary of sound handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.SoundManager.InstanceHandles">
            <summary>
            Gets the dictionary of instance handles.
            </summary>
            <value>
            The instance handles.
            </value>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:WaveEngine.Adapter.SoundManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the sound instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the sound instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.CheckError">
            <summary>
            Checks for OpenAL errors.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.TextureManager">
            <summary>
            Handles texture management.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.Etc1Rgb8Oes">
            <summary>
            Represent Android.Opengl.ETC1.Etc1Rgb8Oes
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.TextureManager.TextureHandles">
            <summary>
            Gets the texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.textureCount">
            <summary>
            Number of textures created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.graphics">
            <summary>
            The graphics API.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.TextureManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Tyep of the returned texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Texture from handle.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged  resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Audio.AudioCapture">
            <summary>
            Provides methods to instantiate, use and destroy an audio device for recording.
            Static methods are provided to list available devices known by the driver.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.#ctor">
            <summary>
            Opens the default device for audio recording.
            Implicitly set parameters are: 22050Hz, 16Bit Mono, 4096 samples ringbuffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.#ctor(System.String,System.Int32,WaveEngine.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>Opens a device for audio recording.</summary>
            <param name="deviceName">The device name.</param>
            <param name="frequency">The frequency that the data should be captured at.</param>
            <param name="sampleFormat">The requested capture buffer format.</param>
            <param name="bufferSize">The size of OpenAL's capture internal ring-buffer. This value expects number of samples, not bytes.</param>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.CurrentDevice">
            <summary>
            The name of the device associated with this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.AvailableDevices">
            <summary>
            Returns a list of strings containing all known recording devices.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.DefaultDevice">
            <summary>
            Returns the name of the device that will be used as recording default.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.CheckErrors">
            <summary>
            Checks for ALC error conditions.
            </summary>
            <exception cref="T:System.OutOfMemoryException">Raised when an out of memory error is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioValueException">Raised when an invalid value is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioDeviceException">Raised when an invalid device is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">Raised when an invalid context is detected.</exception>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.CurrentError">
            <summary>Returns the ALC error code for this device.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.Start">
            <summary>
            Start recording samples.
            The number of available samples can be obtained through the <see cref="P:WaveEngine.Audio.AudioCapture.AvailableSamples"/> property.
            The data can be queried with any <see cref="M:WaveEngine.Audio.AudioCapture.ReadSamples(System.IntPtr,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.Stop">
            <summary>Stop recording samples. This will not clear previously recorded samples.</summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.AvailableSamples">
            <summary>Returns the number of available samples for capture.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.ReadSamples(System.IntPtr,System.Int32)">
            <summary>Fills the specified buffer with samples from the internal capture ring-buffer. This method does not block: it is an error to specify a sampleCount larger than AvailableSamples.</summary>
            <param name="buffer">A pointer to a previously initialized and pinned array.</param>
            <param name="sampleCount">The number of samples to be written to the buffer.</param>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.ReadSamples``1(``0[],System.Int32)">
            <summary>Fills the specified buffer with samples from the internal capture ring-buffer. This method does not block: it is an error to specify a sampleCount larger than AvailableSamples.</summary>
            <param name="buffer">The buffer to fill.</param>
            <param name="sampleCount">The number of samples to be written to the buffer.</param>
            <exception cref="T:System.ArgumentNullException">Raised when buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when sampleCount is larger than the buffer.</exception>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.SampleFormat">
            <summary>
            Gets the OpenTK.Audio.ALFormat for this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.SampleFrequency">
            <summary>
            Gets the sampling rate for this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioCapture.IsRunning">
            <summary>
            Gets a value indicating whether this instance is currently capturing samples.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.Finalize">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioCapture.Dispose">
            <summary>Closes the device and disposes the instance.</summary>
        </member>
        <member name="T:WaveEngine.Audio.AudioContext">
            <summary>
            Provides methods to instantiate, use and destroy an audio context for playback.
            Static methods are provided to list available devices known by the driver.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#cctor">
            \internal
            <summary>
            Runs before the actual class constructor, to load available devices.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor">
            <summary>Constructs a new AudioContext, using the default audio device.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String)">
            <summary>
            Constructs a new AudioContext instance.
            </summary>
            <param name="device">The device name that will host this instance.</param>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new AudioContext, using the specified audio device and device parameters.</summary>
            <param name="device">The name of the audio device to use.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <remarks>
            Use AudioContext.AvailableDevices to obtain a list of all available audio devices.
            devices.
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates the audio context using the specified device and device parameters.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the device string is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:WaveEngine.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,WaveEngine.Audio.AudioContext.MaxAuxiliarySends)">
            <summary>Creates the audio context using the specified device and device parameters.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <param name="efxMaxAuxSends">Requires EFX enabled. The number of desired Auxiliary Sends per source.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when the device string is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:WaveEngine.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="T:WaveEngine.Audio.AudioContext.MaxAuxiliarySends">
            <summary>May be passed at context construction time to indicate the number of desired auxiliary effect slot sends per source.</summary>
        </member>
        <member name="F:WaveEngine.Audio.AudioContext.MaxAuxiliarySends.UseDriverDefault">
            <summary>Will chose a reliably working parameter.</summary>
        </member>
        <member name="F:WaveEngine.Audio.AudioContext.MaxAuxiliarySends.One">
            <summary>One send per source.</summary>
        </member>
        <member name="F:WaveEngine.Audio.AudioContext.MaxAuxiliarySends.Two">
            <summary>Two sends per source.</summary>
        </member>
        <member name="F:WaveEngine.Audio.AudioContext.MaxAuxiliarySends.Three">
            <summary>Three sends per source.</summary>
        </member>
        <member name="F:WaveEngine.Audio.AudioContext.MaxAuxiliarySends.Four">
            <summary>Four sends per source.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.CreateContext(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,WaveEngine.Audio.AudioContext.MaxAuxiliarySends)">
            \internal
            <summary>Creates the audio context using the specified device.</summary>
            <param name="device">The device descriptor obtained through AudioContext.AvailableDevices, or null for the default device.</param>
            <param name="freq">Frequency for mixing output buffer, in units of Hz. Pass 0 for driver default.</param>
            <param name="refresh">Refresh intervals, in units of Hz. Pass 0 for driver default.</param>
            <param name="sync">Flag, indicating a synchronous context.</param>
            <param name="enableEfx">Indicates whether the EFX extension should be initialized, if present.</param>
            <param name="efxAuxiliarySends">Requires EFX enabled. The number of desired Auxiliary Sends per source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when a specified parameter is invalid.</exception>
            <exception cref="T:WaveEngine.Audio.AudioDeviceException">
            Occurs when the specified device is not available, or is in use by another program.
            </exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">
            Occurs when an audio context could not be created with the specified parameters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when an AudioContext already exists.</exception>
            <remarks>
            <para>For maximum compatibility, you are strongly recommended to use the default constructor.</para>
            <para>Multiple AudioContexts are not supported at this point.</para>
            <para>
            The number of auxilliary EFX sends depends on the audio hardware and drivers. Most Realtek devices, as well
            as the Creative SB Live!, support 1 auxilliary send. Creative's Audigy and X-Fi series support 4 sends.
            Values higher than supported will be clamped by the driver.
            </para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.MakeCurrent(WaveEngine.Audio.AudioContext)">
            \internal
            <summary>Makes the specified AudioContext current in the calling thread.</summary>
            <param name="context">The OpenTK.Audio.AudioContext to make current, or null.</param>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.IsCurrent">
            <summary>
            Gets or sets a System.Boolean indicating whether the AudioContext
            is current.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.CheckErrors">
            <summary>
            Checks for ALC error conditions.
            </summary>
            <exception cref="T:System.OutOfMemoryException">Raised when an out of memory error is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioValueException">Raised when an invalid value is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioDeviceException">Raised when an invalid device is detected.</exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">Raised when an invalid context is detected.</exception>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.CurrentError">
            <summary>
            Returns the ALC error code for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.MakeCurrent">
            <summary>Makes the AudioContext current in the calling thread.</summary>
            <exception cref="T:System.ObjectDisposedException">
            Occurs if this function is called after the AudioContext has been disposed.
            </exception>
            <exception cref="T:WaveEngine.Audio.AudioContextException">
            Occurs when the AudioContext could not be made current.
            </exception>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.IsProcessing">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            currently processing audio events.
            </summary>
            <seealso cref="M:WaveEngine.Audio.AudioContext.Process"/>
            <seealso cref="M:WaveEngine.Audio.AudioContext.Suspend"/>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.IsSynchronized">
            <summary>
            Gets a System.Boolean indicating whether the AudioContext is
            synchronized.
            </summary>
            <seealso cref="M:WaveEngine.Audio.AudioContext.Process"/>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.Process">
            <summary>
            Processes queued audio events.
            </summary>
            <remarks>
            <para>
            If AudioContext.IsSynchronized is true, this function will resume
            the internal audio processing thread. If AudioContext.IsSynchronized is false,
            you will need to call this function multiple times per second to process
            audio events.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:WaveEngine.Audio.AudioContext.Suspend"/>
            <seealso cref="P:WaveEngine.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:WaveEngine.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.Suspend">
            <summary>
            Suspends processing of audio events.
            </summary>
            <remarks>
            <para>
            To avoid audio artifacts when calling this function, set audio gain to zero before
            suspending an AudioContext.
            </para>
            <para>
            In some implementations, it can be faster to suspend processing before changing
            AudioContext state.
            </para>
            <para>
            In some implementations this function may have no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Occurs when this function is called after the AudioContext had been disposed.</exception>
            <seealso cref="M:WaveEngine.Audio.AudioContext.Process"/>
            <seealso cref="P:WaveEngine.Audio.AudioContext.IsProcessing"/>
            <seealso cref="P:WaveEngine.Audio.AudioContext.IsSynchronized"/>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.SupportsExtension(System.String)">
            <summary>
            Checks whether the specified OpenAL extension is supported.
            </summary>
            <param name="extension">The name of the extension to check (e.g. "ALC_EXT_EFX").</param>
            <returns>true if the extension is supported; false otherwise.</returns>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.CurrentDevice">
            <summary>
            Gets a System.String with the name of the device used in this context.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.CurrentContext">
            <summary>
            Gets the OpenTK.Audio.AudioContext which is current in the application.
            </summary>
            <remarks>
            Only one AudioContext can be current in the application at any time,
            <b>regardless of the number of threads</b>.
            </remarks>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.AvailableDevices">
            <summary>
            Returns a list of strings containing all known playback devices.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.AudioContext.DefaultDevice">
            <summary>
            Returns the name of the device that will be used as playback default.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.Dispose">
            <summary>
            Disposes of the AudioContext, cleaning up all resources consumed by it.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.Finalize">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.GetHashCode">
            <summary>
            Calculates the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.Equals(System.Object)">
            <summary>
            Compares this instance with another.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True, if obj refers to this instance; false otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.AudioContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that desrcibes this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that desrcibes this instance.</returns>
        </member>
        <member name="T:WaveEngine.Audio.AudioContextException">
            <summary>Represents exceptions related to an OpenTK.Audio.AudioContext.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContextException.#ctor">
            <summary>Constructs a new AudioContextException.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioContextException.#ctor(System.String)">
            <summary>Constructs a new AudioContextException with the specified error message.</summary>
            <param name="message">The error message of the AudioContextException.</param>
        </member>
        <member name="T:WaveEngine.Audio.AudioDeviceException">
            <summary>Represents exceptions related to an OpenTK.Audio device.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioDeviceException.#ctor">
            <summary>Constructs a new AudioDeviceException.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioDeviceException.#ctor(System.String)">
            <summary>Constructs a new AudioDeviceException with the specified error message.</summary>
            <param name="message">The error message of the AudioDeviceException.</param>
        </member>
        <member name="T:WaveEngine.Audio.AudioException">
            <summary>Represents exceptions related to the OpenTK.Audio subsystem.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioException.#ctor">
            <summary>Constructs a new AudioException.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioException.#ctor(System.String)">
            <summary>Constructs a new AudioException with the specified error message.</summary>
            <param name="message">The error message of the AudioException.</param>
        </member>
        <member name="T:WaveEngine.Audio.AudioValueException">
            <summary>Represents exceptions related to invalid values.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioValueException.#ctor">
            <summary>Constructs a new instance.</summary>
        </member>
        <member name="M:WaveEngine.Audio.AudioValueException.#ctor(System.String)">
            <summary>Constructs a new instance with the specified error message.</summary>
            <param name="message">The error message of the AudioContextException.</param>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.Alc">
            <summary>Alc = Audio Library Context</summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CreateContext(System.IntPtr,System.Int32*)">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attrlist">a pointer to a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure). The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CreateContext(System.IntPtr,System.Int32[])">
            <summary>This function creates a context using a specified device.</summary>
            <param name="device">a pointer to a device</param>
            <param name="attriblist">an array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC</param>
            <returns>Returns a pointer to the new context (NULL on failure).</returns>
            <remarks>The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.</remarks>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.MakeContextCurrent(OpenTK.ContextHandle)">
            <summary>This function makes a specified context the current context.</summary>
            <param name="context">A pointer to the new context.</param>
            <returns>Returns True on success, or False on failure.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.ProcessContext(OpenTK.ContextHandle)">
            <summary>This function tells a context to begin processing. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. alcSuspendContext can be used to suspend a context, and then all the OpenAL state changes can be applied at once, followed by a call to alcProcessContext to apply all the state changes immediately. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the new context</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.SuspendContext(OpenTK.ContextHandle)">
            <summary>This function suspends processing on a specified context. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. A typical use of alcSuspendContext would be to suspend a context, apply all the OpenAL state changes at once, and then call alcProcessContext to apply all the state changes at once. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.</summary>
            <param name="context">a pointer to the context to be suspended.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.DestroyContext(OpenTK.ContextHandle)">
            <summary>This function destroys a context.</summary>
            <param name="context">a pointer to the new context.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetCurrentContext">
            <summary>This function retrieves the current context.</summary>
            <returns>Returns a pointer to the current context.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetContextsDevice(OpenTK.ContextHandle)">
            <summary>This function retrieves a context's device pointer.</summary>
            <param name="context">a pointer to a context.</param>
            <returns>Returns a pointer to the specified context's device.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.OpenDevice(System.String)">
            <summary>This function opens a device by name.</summary>
            <param name="devicename">a null-terminated string describing a device.</param>
            <returns>Returns a pointer to the opened device. The return value will be NULL if there is an error.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CloseDevice(System.IntPtr)">
            <summary>This function closes a device by name.</summary>
            <param name="device">a pointer to an opened device</param>
            <returns>True will be returned on success or False on failure. Closing a device will fail if the device contains any contexts or buffers.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetError(System.IntPtr)">
            <summary>This function retrieves the current context error state.</summary>
            <param name="device">a pointer to the device to retrieve the error state from</param>
            <returns>Errorcode Int32.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.IsExtensionPresent(System.IntPtr,System.String)">
            <summary>This function queries if a specified context extension is available.</summary>
            <param name="device">a pointer to the device to be queried for an extension.</param>
            <param name="extname">a null-terminated string describing the extension.</param>
            <returns>Returns True if the extension is available, False if the extension is not available.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetProcAddress(System.IntPtr,System.String)">
            <summary>This function retrieves the address of a specified context extension function.</summary>
            <param name="device">a pointer to the device to be queried for the function.</param>
            <param name="funcname">a null-terminated string describing the function.</param>
            <returns>Returns the address of the function, or NULL if it is not found.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetEnumValue(System.IntPtr,System.String)">
            <summary>This function retrieves the enum value for a specified enumeration name.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="enumname">a null terminated string describing the enum value.</param>
            <returns>Returns the enum value described by the enumName string. This is most often used for querying an enum value for an ALC extension.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetString(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetString)">
            <summary>This function returns pointers to strings related to the context.</summary>
            <remarks>
            ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.
            ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS</param>
            <returns>A string containing the name of the Device.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetString(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetStringList)">
            <summary>This function returns a List of strings related to the context.</summary>
            <remarks>
            ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.
            ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.
            ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
            </remarks>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER</param>
            <returns>A List of strings containing the names of the Devices.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetInteger(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.GetInteger(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])">
            <summary>This function returns integers related to the context.</summary>
            <param name="device">a pointer to the device to be queried.</param>
            <param name="param">an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES</param>
            <param name="size">the size of the destination buffer provided, in number of integers.</param>
            <param name="data">a pointer to the buffer to be returned</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureOpenDevice(System.String,System.UInt32,WaveEngine.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">a pointer to a device name string.</param>
            <param name="frequency">the frequency that the buffer should be captured at.</param>
            <param name="format">the requested capture buffer format.</param>
            <param name="buffersize">the size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or NULL on failure.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureOpenDevice(System.String,System.Int32,WaveEngine.Audio.OpenAL.ALFormat,System.Int32)">
            <summary>This function opens a capture device by name. </summary>
            <param name="devicename">a pointer to a device name string.</param>
            <param name="frequency">the frequency that the buffer should be captured at.</param>
            <param name="format">the requested capture buffer format.</param>
            <param name="buffersize">the size of the capture buffer in samples, not bytes.</param>
            <returns>Returns the capture device pointer, or NULL on failure.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureCloseDevice(System.IntPtr)">
            <summary>This function closes the specified capture device.</summary>
            <param name="device">a pointer to a capture device.</param>
            <returns>Returns True if the close operation was successful, False on failure.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureStart(System.IntPtr)">
            <summary>This function begins a capture operation.</summary>
            <remarks>alcCaptureStart will begin recording to an internal ring buffer of the size specified when opening the capture device. The application can then retrieve the number of samples currently available using the ALC_CAPTURE_SAPMPLES token with alcGetIntegerv. When the application determines that enough samples are available for processing, then it can obtain them with a call to alcCaptureSamples.</remarks>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureStop(System.IntPtr)">
            <summary>This function stops a capture operation.</summary>
            <param name="device">a pointer to a capture device.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureSamples(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a pointer to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0@,System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a reference to a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.Alc.CaptureSamples``1(System.IntPtr,``0[0:,0:,0:],System.Int32)">
            <summary>This function completes a capture operation, and does not block.</summary>
            <param name="device">a pointer to a capture device.</param>
            <param name="buffer">a buffer, which must be large enough to accommodate the number of samples.</param>
            <param name="samples">the number of samples to be retrieved.</param>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AlcContextAttributes">
            <summary>
            Defines available context attributes.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.Frequency">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.Refresh">
            <summary>Followed by System.Int32 Hz</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.Sync">
            <summary>Followed by AlBoolean.True, or AlBoolean.False</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.MonoSources">
            <summary>Followed by System.Int32 Num of requested Mono (3D) Sources</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.StereoSources">
            <summary>Followed by System.Int32 Num of requested Stereo Sources</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcContextAttributes.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AlcError">
            <summary>
            Defines OpenAL context errors.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.NoError">
            <summary>There is no current error.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.InvalidDevice">
            <summary>No Device. The device handle or specifier names an inaccessible driver/server.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.InvalidContext">
            <summary>Invalid context ID. The Context argument does not name a valid context.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.InvalidEnum">
            <summary>Bad enum. A token used is not valid, or not applicable.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.InvalidValue">
            <summary>Bad value. A value (e.g. Attribute) is not valid, or not applicable.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcError.OutOfMemory">
            <summary>Out of memory. Unable to allocate memory.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AlcGetString">
            <summary>
            Defines available parameters for <see cref="!:OpenTK.Audio.OpenAL.Alc.GetString(IntPtr, AlcGetString)"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.DefaultDeviceSpecifier">
            <summary>The specifier string for the default device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.Extensions">
            <summary>A list of available context extensions separated by spaces.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.CaptureDefaultDeviceSpecifier">
            <summary>The name of the default capture device</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.DefaultAllDevicesSpecifier">
            <summary>a list of the default devices.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.CaptureDeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.CaptureDeviceSpecifier. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.DeviceSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.DeviceSpecifier</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetString.AllDevicesSpecifier">
            <summary>Will only return the first Device, not a list. Use AlcGetStringList.AllDevicesSpecifier</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AlcGetStringList">
            <summary>
            Defines available parameters for <see cref="M:WaveEngine.Audio.OpenAL.Alc.GetString(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetStringList)"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetStringList.CaptureDeviceSpecifier">
            <summary>The name of the specified capture device, or a list of all available capture devices if no capture device is specified. ALC_EXT_CAPTURE_EXT </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetStringList.DeviceSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATION_EXT</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetStringList.AllDevicesSpecifier">
            <summary>The specifier strings for all available devices. ALC_ENUMERATE_ALL_EXT</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AlcGetInteger">
            <summary>
            Defines available parameters for <see cref="M:WaveEngine.Audio.OpenAL.Alc.GetInteger(System.IntPtr,WaveEngine.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.MajorVersion">
            <summary>The specification revision for this implementation (major version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.MinorVersion">
            <summary>The specification revision for this implementation (minor version). NULL is an acceptable device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.AttributesSize">
            <summary>The size (number of ALCint values) required for a zero-terminated attributes list, for the current context. NULL is an invalid device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.AllAttributes">
            <summary>Expects a destination of ALC_ATTRIBUTES_SIZE, and provides an attribute list for the current context of the specified device. NULL is an invalid device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.CaptureSamples">
            <summary>The number of capture samples available. NULL is an invalid device.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.EfxMajorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Major version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.EfxMinorVersion">
            <summary>(EFX Extension) This property can be used by the application to retrieve the Minor version number of the Effects Extension supported by this OpenAL implementation. As this is a Context property is should be retrieved using alcGetIntegerv.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.AlcGetInteger.EfxMaxAuxiliarySends">
            <summary>(EFX Extension) This Context property can be passed to OpenAL during Context creation (alcCreateContext) to request a maximum number of Auxiliary Sends desired on each Source. It is not guaranteed that the desired number of sends will be available, so an application should query this property after creating the context using alcGetIntergerv. Default: 2</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.AL">
            <summary>
            Provides access to the OpenAL 1.1 flat API.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Enable(WaveEngine.Audio.OpenAL.ALCapability)">
            <summary>This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.</summary>
            <param name="capability">The name of a capability to enable.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Disable(WaveEngine.Audio.OpenAL.ALCapability)">
            <summary>This function disables a feature of the OpenAL driver.</summary>
            <param name="capability">The name of a capability to disable.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsEnabled(WaveEngine.Audio.OpenAL.ALCapability)">
            <summary>This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.</summary>
            <param name="capability">The name of a capability to enable.</param>
            <returns>True if enabled, False if disabled.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Get(WaveEngine.Audio.OpenAL.ALGetString)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The property to be returned: Vendor, Version, Renderer and Extensions</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetErrorString(WaveEngine.Audio.OpenAL.ALError)">
            <summary>This function retrieves an OpenAL string property.</summary>
            <param name="param">The human-readable errorstring to be returned.</param>
            <returns>Returns a pointer to a null-terminated string.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Get(WaveEngine.Audio.OpenAL.ALGetInteger)">
            <summary>This function returns an integer OpenAL state.</summary>
            <param name="param">the state to be queried: DistanceModel.</param>
            <returns>The integer state described by param will be returned.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Get(WaveEngine.Audio.OpenAL.ALGetFloat)">
            <summary>This function returns a floating-point OpenAL state.</summary>
            <param name="param">the state to be queried: DopplerFactor, SpeedOfSound.</param>
            <returns>The floating-point state described by param will be returned.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetError">
            <summary>Error support. Obtain the most recent error generated in the AL state machine. When an error is detected by AL, a flag is set and the error code is recorded. Further errors, if they occur, do not affect this recorded code. When alGetError is called, the code is returned and the flag is cleared, so that a further error will again record its code.</summary>
            <returns>The first error that occured. can be used with AL.GetString. Returns an Alenum representing the error state. When an OpenAL error occurs, the error state is set and will not be changed until the error state is retrieved using alGetError. Whenever alGetError is called, the error state is cleared and the last state (the current state when the call was made) is returned. To isolate error detection to a specific portion of code, alGetError should be called before the isolated section to clear the current error state.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsExtensionPresent(System.String)">
            <summary>This function tests if a specific Extension is available for the OpenAL driver.</summary>
             <param name="extname">A string naming the desired extension. Example: "EAX-RAM"</param>
             <returns>Returns True if the Extension is available or False if not available.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetProcAddress(System.String)">
            <summary>This function returns the address of an OpenAL extension function. Handle with care.</summary>
            <param name="fname">A string containing the function name.</param>
            <returns>The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetEnumValue(System.String)">
            <summary>This function returns the enumeration value of an OpenAL token, described by a string.</summary>
            <param name="ename">A string describing an OpenAL token. Example "AL_DISTANCE_MODEL"</param>
            <returns>Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Listener(WaveEngine.Audio.OpenAL.ALListenerf,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerf.Gain</param>
            <param name="value">The float value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Listener(WaveEngine.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a floating-point property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">The value to set the attribute to.</param>
            <param name="value2">The value to set the attribute to.</param>
            <param name="value3">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Listener(WaveEngine.Audio.OpenAL.ALListener3f,OpenTK.Vector3@)">
            <summary>This function sets a Math.Vector3 property for the listener.</summary>
            <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">The Math.Vector3 to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Listener(WaveEngine.Audio.OpenAL.ALListenerfv,System.Single[]@)">
            <summary>This function sets a floating-point vector property of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">Pointer to floating-point vector values.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Listener(WaveEngine.Audio.OpenAL.ALListenerfv,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>This function sets two Math.Vector3 properties of the listener.</summary>
            <param name="param">The name of the attribute to be set: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetListener(WaveEngine.Audio.OpenAL.ALListenerf,System.Single@)">
            <summary>This function retrieves a floating-point property of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerf.Gain</param>
            <param name="value">a pointer to the floating-point value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetListener(WaveEngine.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves a set of three floating-point values from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="value1">The first floating-point value being retrieved.</param>
            <param name="value2">The second floating-point value  being retrieved.</param>
            <param name="value3">The third floating-point value  being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetListener(WaveEngine.Audio.OpenAL.ALListener3f,OpenTK.Vector3@)">
            <summary>This function retrieves a Math.Vector3 from a property of the listener.</summary>
            <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
            <param name="values">A Math.Vector3 to hold the three floats being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetListener(WaveEngine.Audio.OpenAL.ALListenerfv,System.Single*)">
            <summary>This function retrieves a floating-point vector property of the listener. You must pin it manually.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
            <param name="values">A pointer to the floating-point vector value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetListener(WaveEngine.Audio.OpenAL.ALListenerfv,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>This function retrieves two Math.Vector3 properties of the listener.</summary>
            <param name="param">the name of the attribute to be retrieved: ALListenerfv.Orientation</param>
            <param name="at">A Math.Vector3 for the At-Vector.</param>
            <param name="up">A Math.Vector3 for the Up-Vector.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSources(System.Int32,System.UInt32@)">
            <summary>This function generates one or more sources. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of uint values which will store the names of the new sources.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSources(System.Int32[])">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSources(System.Int32)">
            <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="n">The number of sources to be generated.</param>
            <returns>Pointer to an array of int values which will store the names of the new sources.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSource">
            <summary>This function generates one source only. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <returns>Pointer to an int value which will store the name of the new source.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenSource(System.UInt32@)">
            <summary>This function generates one source only. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
            <param name="source">Pointer to an uint value which will store the name of the new source.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSources(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Pointer to an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSources(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)">
            <summary>This function deletes one or more sources.</summary>
            <param name="n">The number of sources to be deleted.</param>
            <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSources(System.UInt32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSources(System.Int32[])">
            <summary>This function deletes one or more sources.</summary>
            <param name="sources">An array of source names identifying the sources to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSource(System.UInt32@)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteSource(System.Int32)">
            <summary>This function deletes one source only.</summary>
            <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsSource(System.UInt32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsSource(System.Int32)">
            <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
            <param name="sid">A source name to be tested for validity</param>
            <returns>Success.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSourcef,System.Single)">
            <summary>This function sets a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSourcef,System.Single)">
            <summary>This function sets a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being set</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">The three ALfloat values which the attribute will be set to.</param>
            <param name="value2">The three ALfloat values which the attribute will be set to.</param>
            <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function sets a source property requiring three floating-point values.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSourcei,System.Int32)">
            <summary>This function sets an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSourceb,System.Boolean)">
            <summary>This function sets an bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being set.</param>
            <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">The value to set the attribute to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.BindBufferToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.BindBufferToSource(System.Int32,System.Int32)">
            <summary>(Helper) Binds a Buffer to a Source handle.</summary>
            <param name="source">Source name to attach the Buffer to.</param>
            <param name="buffer">Buffer name which is attached to the Source.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.UInt32,WaveEngine.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.Source(System.Int32,WaveEngine.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)">
             <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
             <param name="sid">Source name whose attribute is being set.</param>
             <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
             <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
             <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
            <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.UInt32,WaveEngine.Audio.OpenAL.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating-point value being retrieved</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.Int32,WaveEngine.Audio.OpenAL.ALSourcef,System.Single@)">
            <summary>This function retrieves a floating-point property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
            <param name="value">A pointer to the floating-point value being retrieved</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.UInt32,WaveEngine.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.Int32,WaveEngine.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="value1">Pointer to the value to retrieve.</param>
            <param name="value2">Pointer to the value to retrieve.</param>
            <param name="value3">Pointer to the value to retrieve.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.UInt32,WaveEngine.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.Int32,WaveEngine.Audio.OpenAL.ALSource3f,OpenTK.Vector3@)">
            <summary>This function retrieves three floating-point values representing a property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
            <param name="values">A Math.Vector3 to retrieve the values to.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.UInt32,WaveEngine.Audio.OpenAL.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.Int32,WaveEngine.Audio.OpenAL.ALGetSourcei,System.Int32@)">
            <summary>This function retrieves an integer property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
            <param name="value">A pointer to the integer value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.UInt32,WaveEngine.Audio.OpenAL.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSource(System.Int32,WaveEngine.Audio.OpenAL.ALSourceb,System.Boolean@)">
            <summary>This function retrieves a bool property of a source.</summary>
            <param name="sid">Source name whose attribute is being retrieved.</param>
            <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
            <param name="value">A pointer to the bool value being retrieved.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32*)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.Int32,System.UInt32@)">
            <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="ns">The number of sources to be played.</param>
            <param name="sids">A pointer to an array of sources to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
            <param name="ns">The number of sources to stop.</param>
            <param name="sids">A pointer to an array of sources to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32*)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.Int32,System.UInt32@)">
            <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
            <param name="ns">The number of sources to be rewound.</param>
            <param name="sids">A pointer to an array of sources to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32*)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.Int32,System.UInt32@)">
            <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
            <param name="ns">The number of sources to be paused.</param>
            <param name="sids">A pointer to an array of sources to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.UInt32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePlay(System.Int32)">
            <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
            <param name="sid">The name of the source to be played.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.UInt32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceStop(System.Int32)">
            <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
            <param name="sid">The name of the source to be stopped.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.UInt32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceRewind(System.Int32)">
            <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
            <param name="sid">The name of the source to be rewound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.UInt32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourcePause(System.Int32)">
            <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
            <param name="sid">The name of the source to be paused.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceQueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="sid">The name of the source to queue buffers onto.</param>
            <param name="numEntries">The number of buffers to be queued.</param>
            <param name="bids">A pointer to an array of buffer names to be queued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)">
            <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
            <param name="source">The name of the source to queue buffers onto.</param>
            <param name="buffer">The name of the buffer to be queued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32*)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.UInt32,System.Int32,System.UInt32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
            <param name="bids">A pointer to an array of buffer names that were removed.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)">
            <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
            <param name="sid">The name of the source to unqueue buffers from.</param>
            <param name="numEntries">The number of buffers to be unqueued.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32,System.UInt32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32,System.UInt32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)">
            <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32)">
            <summary>This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="n">The number of buffers to be generated.</param>
            <returns>Pointer to an array of uint values which will store the names of the new buffers.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffer">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <returns>Pointer to an uint value which will store the name of the new buffer.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GenBuffer(System.UInt32@)">
            <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
            <param name="buffer">Pointer to an uint value which will store the names of the new buffer.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.UInt32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.UInt32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="n">The number of buffers to be deleted.</param>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.UInt32[])">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])">
            <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffer(System.UInt32@)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DeleteBuffer(System.Int32)">
            <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
            <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsBuffer(System.UInt32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.IsBuffer(System.Int32)">
            <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
            <param name="bid">A buffer Handle previously allocated with <see cref="M:WaveEngine.Audio.OpenAL.AL.GenBuffers(System.Int32)"/>.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.BufferData(System.UInt32,WaveEngine.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.BufferData(System.Int32,WaveEngine.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">Pointer to a pinned audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.BufferData``1(System.Int32,WaveEngine.Audio.OpenAL.ALFormat,``0[],System.Int32,System.Int32)">
            <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
            <param name="bid">buffer Handle/Name to be filled with buffer.</param>
            <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
            <param name="buffer">The audio buffer.</param>
            <param name="size">The size of the audio buffer in bytes.</param>
            <param name="freq">The frequency of the audio buffer.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetBuffer(System.UInt32,WaveEngine.Audio.OpenAL.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetBuffer(System.Int32,WaveEngine.Audio.OpenAL.ALGetBufferi,System.Int32@)">
            <summary>This function retrieves an integer property of a buffer.</summary>
            <param name="bid">Buffer name whose attribute is being retrieved</param>
            <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
            <param name="value">A pointer to an int to hold the retrieved buffer</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DopplerFactor(System.Single)">
            <summary>AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.</summary>
            <param name="value">A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DopplerVelocity(System.Single)">
            <summary>This function is deprecated and should not be used.</summary>
            <param name="value">The default is 1.0f.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.SpeedOfSound(System.Single)">
            <summary>AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.</summary>
            <param name="value">A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.DistanceModel(WaveEngine.Audio.OpenAL.ALDistanceModel)">
            <summary>This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.</summary>
            <remarks>
            The ALDistanceModel .InverseDistance model works according to the following formula:
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel .InverseDistanceClamped model works according to the following formula:
            distance = max(distance,ALSourcef.ReferenceDistance);
            distance = min(distance,ALSourcef.MaxDistance);
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            
            The ALDistanceModel.LinearDistance model works according to the following formula: 
            distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.LinearDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            
            The ALDistanceModel.ExponentDistance model works according to the following formula:
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor) 
            
            The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            
            The ALDistanceModel.None model works according to the following formula:
            gain = 1f;
            </remarks>
            <param name="distancemodel"></param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSourceState(System.UInt32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSourceState(System.Int32)">
            <summary>(Helper) Returns Source state information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>state information from OpenAL.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSourceType(System.UInt32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetSourceType(System.Int32)">
            <summary>(Helper) Returns Source type information.</summary>
            <param name="sid">The source to be queried.</param>
            <returns>type information from OpenAL.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.AL.GetDistanceModel">
            <summary>
            Returns the <see cref="T:WaveEngine.Audio.OpenAL.ALDistanceModel"/> of the current context.
            </summary>
            <returns>The <see cref="T:WaveEngine.Audio.OpenAL.ALDistanceModel"/> of the current context.</returns>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALCapability">
            <summary>A list of valid Enable/Disable/IsEnabled parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALCapability.Invalid">
            <summary>Currently no state toggles exist for vanilla OpenAL and no Extension uses it.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALListenerf">
            <summary>A list of valid 32-bit Float Listener/GetListener parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALListenerf.Gain">
            <summary>Indicate the gain (Volume amplification) applied. Type: float Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is interpreted as zero volume and the channel is effectively disabled.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALListenerf.EfxMetersPerUnit">
            <summary>(EFX Extension) This setting is critical if Air Absorption effects are enabled because the amount of Air Absorption applied is directly related to the real-world distance between the Source and the Listener. centimeters 0.01f meters 1.0f kilometers 1000.0f Range [float.MinValue .. float.MaxValue] Default: 1.0f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALListener3f">
            <summary>A list of valid Math.Vector3 Listener/GetListener parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALListener3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALListener3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALListenerfv">
            <summary>A list of valid float[] Listener/GetListener parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALListenerfv.Orientation">
            <summary>Indicate Listener orientation. Expects two Vector3, At followed by Up.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSourcef">
            <summary>A list of valid 32-bit Float Source/GetSource parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.ReferenceDistance">
            <summary>Source specific reference distance. Type: float Range: [0.0f - float.PositiveInfinity] At 0.0f, no distance attenuation occurs. Type: float Default: 1.0f.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.MaxDistance">
            <summary>Indicate distance above which Sources are not attenuated using the inverse clamped distance model. Default: float.PositiveInfinity Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.RolloffFactor">
            <summary>Source specific rolloff factor. Type: float Range: [0.0f - float.PositiveInfinity]</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.Pitch">
            <summary>Specify the pitch to be applied, either at Source, or on mixer results, at Listener. Range: [0.5f - 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.Gain">
            <summary>Indicate the gain (volume amplification) applied. Type: float. Range: [0.0f - ? ] A value of 1.0 means un-attenuated/unchanged. Each division by 2 equals an attenuation of -6dB. Each multiplicaton with 2 equals an amplification of +6dB. A value of 0.0f is meaningless with respect to a logarithmic scale; it is interpreted as zero volume - the channel is effectively disabled.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.MinGain">
            <summary>Indicate minimum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.MaxGain">
            <summary>Indicate maximum Source attenuation. Type: float Range: [0.0f - 1.0f] (Logarthmic)</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.ConeInnerAngle">
            <summary>Directional Source, inner cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.ConeOuterAngle">
            <summary>Directional Source, outer cone angle, in degrees. Range: [0-360] Default: 360</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.ConeOuterGain">
            <summary>Directional Source, outer cone gain. Default: 0.0f Range: [0.0f - 1.0] (Logarithmic)</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.SecOffset">
            <summary>The playback position, expressed in seconds.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.EfxAirAbsorptionFactor">
            <summary>(EFX Extension) This property is a multiplier on the amount of Air Absorption applied to the Source. The AL_AIR_ABSORPTION_FACTOR is multiplied by an internal Air Absorption Gain HF value of 0.994 (-0.05dB) per meter which represents normal atmospheric humidity and temperature. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.EfxRoomRolloffFactor">
            <summary>(EFX Extension) This property is defined the same way as the Reverb Room Rolloff property: it is one of two methods available in the Effect Extension to attenuate the reflected sound (early reflections and reverberation) according to source-listener distance. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcef.EfxConeOuterGainHighFrequency">
            <summary>(EFX Extension) A directed Source points in a specified direction. The Source sounds at full volume when the listener is directly in front of the source; it is attenuated as the listener circles the Source away from the front. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSource3f">
            <summary>A list of valid Math.Vector3 Source/GetSource parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSource3f.Position">
            <summary>Specify the current location in three dimensional space. OpenAL, like OpenGL, uses a right handed coordinate system, where in a frontal default view X (thumb) points right, Y points up (index finger), and Z points towards the viewer/camera (middle finger). To switch from a left handed coordinate system, flip the sign on the Z coordinate. Listener position is always in the world coordinate system.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSource3f.Velocity">
            <summary>Specify the current velocity in three dimensional space.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSource3f.Direction">
            <summary>Specify the current direction vector.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSourceb">
            <summary>A list of valid 8-bit boolean Source/GetSource parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceb.SourceRelative">
            <summary>Indicate that the Source has relative coordinates. Type: bool Range: [True, False]</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceb.Looping">
            <summary>Indicate whether the Source is looping. Type: bool Range: [True, False] Default: False.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceb.EfxDirectFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is set to True, this Source’s direct-path is automatically filtered according to the orientation of the source relative to the listener and the setting of the Source property Sourcef.ConeOuterGainHF. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainAuto">
            <summary>(EFX Extension) If this Source property is set to True, the intensity of this Source’s reflected sound is automatically attenuated according to source-listener distance and source directivity (as determined by the cone parameters). If it is False, the reflected sound is not attenuated according to distance and directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceb.EfxAuxiliarySendFilterGainHighFrequencyAuto">
            <summary>(EFX Extension) If this Source property is AL_TRUE (its default value), the intensity of this Source’s reflected sound at high frequencies will be automatically attenuated according to the high-frequency source directivity as set by the Sourcef.ConeOuterGainHF property. If this property is AL_FALSE, the Source’s reflected sound is not filtered at all according to the Source’s directivity. Type: bool Range [False, True] Default: True</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSourcei">
            <summary>A list of valid Int32 Source parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcei.SampleOffset">
            <summary>The playback position, expressed in samples.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourcei.EfxDirectFilter">
            <summary>(EFX Extension) This Source property is used to apply filtering on the direct-path (dry signal) of a Source.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSource3i">
            <summary>A list of valid 3x Int32 Source/GetSource parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSource3i.EfxAuxiliarySendFilter">
            <summary>(EFX Extension) This Source property is used to establish connections between Sources and Auxiliary Effect Slots. For a Source to feed an Effect that has been loaded into an Auxiliary Effect Slot the application must configure one of the Source’s auxiliary sends. This process involves setting 3 variables – the destination Auxiliary Effect Slot ID, the Auxiliary Send number, and an optional Filter ID. Type: uint Range: any valid Filter Handle.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALGetSourcei">
            <summary>A list of valid Int32 GetSource parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.ByteOffset">
            <summary>The playback position, expressed in bytes. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.SampleOffset">
            <summary>The playback position, expressed in samples. AL_EXT_OFFSET Extension.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.Buffer">
            <summary>Indicate the Buffer to provide sound samples. Type: uint Range: any valid Buffer Handle.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.SourceState">
            <summary>The state of the source (Stopped, Playing, etc.) Use the enum AlSourceState for comparison.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.BuffersQueued">
            <summary>The number of buffers queued on this source.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.BuffersProcessed">
            <summary>The number of buffers in the queue that have been processed.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetSourcei.SourceType">
            <summary>Source type (Static, Streaming or undetermined). Use enum AlSourceType for comparison.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSourceState">
            <summary>Source state information, can be retrieved by AL.Source() with ALSourcei.SourceState.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceState.Initial">
            <summary>Default State when loaded, can be manually set with AL.SourceRewind().</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceState.Playing">
            <summary>The source is currently playing.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceState.Paused">
            <summary>The source has paused playback.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceState.Stopped">
            <summary>The source is not playing.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALSourceType">
            <summary>Source type information,  can be retrieved by AL.Source() with ALSourcei.SourceType.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceType.Static">
            <summary>Source is Static if a Buffer has been attached using AL.Source with the parameter Sourcei.Buffer.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceType.Streaming">
            <summary>Source is Streaming if one or more Buffers have been attached using AL.SourceQueueBuffers</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALSourceType.Undetermined">
            <summary>Source is undetermined when it has a null Buffer attached</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALFormat">
            <summary>Sound samples: Format specifier.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Mono8">
            <summary>1 Channel, 8 bits per sample.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Mono16">
            <summary>1 Channel, 16 bits per sample.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Stereo8">
            <summary>2 Channels, 8 bits per sample each.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Stereo16">
            <summary>2 Channels, 16 bits per sample each.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MonoALawExt">
            <summary>1 Channel, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.StereoALawExt">
            <summary>2 Channels, A-law encoded data. Requires Extension: AL_EXT_ALAW</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MonoMuLawExt">
            <summary>1 Channel, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.StereoMuLawExt">
            <summary>2 Channels, µ-law encoded data. Requires Extension: AL_EXT_MULAW</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.VorbisExt">
            <summary>Ogg Vorbis encoded data. Requires Extension: AL_EXT_vorbis</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Mp3Ext">
            <summary>MP3 encoded data. Requires Extension: AL_EXT_mp3</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MonoIma4Ext">
            <summary>1 Channel, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.StereoIma4Ext">
            <summary>2 Channels, IMA4 ADPCM encoded data. Requires Extension: AL_EXT_IMA4</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MonoFloat32Ext">
            <summary>1 Channel, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.StereoFloat32Ext">
            <summary>2 Channels, single-precision floating-point data. Requires Extension: AL_EXT_float32</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MonoDoubleExt">
            <summary>1 Channel, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.StereoDoubleExt">
            <summary>2 Channels, double-precision floating-point data. Requires Extension: AL_EXT_double</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi51Chn16Ext">
            <summary>Multichannel 5.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi51Chn32Ext">
            <summary>Multichannel 5.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi51Chn8Ext">
            <summary>Multichannel 5.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi61Chn16Ext">
            <summary>Multichannel 6.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi61Chn32Ext">
            <summary>Multichannel 6.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi61Chn8Ext">
            <summary>Multichannel 6.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi71Chn16Ext">
            <summary>Multichannel 7.1, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi71Chn32Ext">
            <summary>Multichannel 7.1, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.Multi71Chn8Ext">
            <summary>Multichannel 7.1, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiQuad16Ext">
            <summary>Multichannel 4.0, 16-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiQuad32Ext">
            <summary>Multichannel 4.0, 32-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiQuad8Ext">
            <summary>Multichannel 4.0, 8-bit data. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiRear16Ext">
            <summary>1 Channel rear speaker, 16-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiRear32Ext">
            <summary>1 Channel rear speaker, 32-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALFormat.MultiRear8Ext">
            <summary>1 Channel rear speaker, 8-bit data. See Quadrophonic setups. Requires Extension: AL_EXT_MCFORMATS</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALGetBufferi">
            <summary>A list of valid Int32 GetBuffer parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetBufferi.Frequency">
            <summary>Sound sample's frequency, in units of hertz [Hz]. This is the number of samples per second. Half of the sample frequency marks the maximum significant frequency component.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetBufferi.Bits">
            <summary>Bit depth of the buffer. Should be 8 or 16.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetBufferi.Channels">
            <summary>Number of channels in buffer. > 1 is valid, but buffer won’t be positioned when played. 1 for Mono, 2 for Stereo.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetBufferi.Size">
            <summary>size of the Buffer in bytes.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALBufferState">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALBufferState.Unused">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALBufferState.Pending">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALBufferState.Processed">
            <summary>Buffer state. Not supported for public use (yet).</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALError">
            <summary>Returned by AL.GetError</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.NoError">
            <summary>No OpenAL Error.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.InvalidName">
            <summary>Invalid Name paramater passed to OpenAL call.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.IllegalEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.InvalidEnum">
            <summary>Invalid parameter passed to OpenAL call.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.InvalidValue">
            <summary>Invalid OpenAL enum parameter value.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.IllegalCommand">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.InvalidOperation">
            <summary>Illegal OpenAL call.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALError.OutOfMemory">
            <summary>No OpenAL memory left.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALGetString">
            <summary>A list of valid string AL.Get() parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetString.Vendor">
            <summary>Gets the Vendor name.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetString.Version">
            <summary>Gets the driver version.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetString.Renderer">
            <summary>Gets the renderer mode.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetString.Extensions">
            <summary>Gets a list of all available Extensions, separated with spaces.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALGetFloat">
            <summary>A list of valid 32-bit Float AL.Get() parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetFloat.DopplerFactor">
            <summary>Doppler scale. Default 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetFloat.DopplerVelocity">
            <summary>Tweaks speed of propagation. This functionality is deprecated.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetFloat.SpeedOfSound">
            <summary>Speed of Sound in units per second. Default: 343.3f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALGetInteger">
            <summary>A list of valid Int32 AL.Get() parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALGetInteger.DistanceModel">
            <summary>See enum ALDistanceModel.</summary><see cref="T:WaveEngine.Audio.OpenAL.ALDistanceModel"/>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.ALDistanceModel">
            <summary>Used by AL.DistanceModel(), the distance model can be retrieved by AL.Get() with ALGetInteger.DistanceModel</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.None">
            <summary>Bypasses all distance attenuation calculation for all Sources.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.InverseDistance">
            <summary>InverseDistance is equivalent to the IASIG I3DL2 model with the exception that ALSourcef.ReferenceDistance does not imply any clamping.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.InverseDistanceClamped">
            <summary>InverseDistanceClamped is the IASIG I3DL2 model, with ALSourcef.ReferenceDistance indicating both the reference distance and the distance below which gain will be clamped.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.LinearDistance">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.LinearDistanceClamped">
            <summary>AL_EXT_LINEAR_DISTANCE extension.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.ExponentDistance">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.ALDistanceModel.ExponentDistanceClamped">
            <summary>AL_EXT_EXPONENT_DISTANCE extension.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EffectsExtension">
            <summary>
            Provides access to the OpenAL effects extension.
            </summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindEffect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindEffect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffectType)">
            <summary>(Helper) Selects the Effect type used by this Effect handle.</summary>
            <param name="eid">Effect id returned from a successful call to GenEffects.</param>
            <param name="type">Effect type.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindFilterToSource(System.UInt32,System.UInt32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindFilterToSource(System.Int32,System.Int32)">
            <summary>(Helper) reroutes the output of a Source through a Filter.</summary>
            <param name="source">A valid Source handle.</param>
            <param name="filter">A valid Filter handle.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindEffectToAuxiliarySlot(System.UInt32,System.UInt32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindEffectToAuxiliarySlot(System.Int32,System.Int32)">
            <summary>(Helper) Attaches an Effect to an Auxiliary Effect Slot.</summary>
            <param name="auxiliaryeffectslot">The slot handle to attach the Effect to.</param>
            <param name="effect">The Effect handle that is being attached.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindSourceToAuxiliarySlot(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.BindSourceToAuxiliarySlot(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>(Helper) Reroutes a Source's output into an Auxiliary Effect Slot.</summary>
            <param name="source">The Source handle who's output is forwarded.</param>
            <param name="slot">The Auxiliary Effect Slot handle that receives input from the Source.</param>
            <param name="slotnumber">Every Source has only a limited number of slots it can feed buffer to. The number must stay below AlcContextAttributes.EfxMaxAuxiliarySends</param>
            <param name="filter">Filter handle to be attached between Source ouput and Auxiliary Slot input. Use 0 or EfxFilterType.FilterNull for no filter. </param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32,System.UInt32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32,System.Int32@)">
            <summary>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object</summary>
            <remarks>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</remarks>
            <param name="n">Number of Effects to be created.</param>
            <param name="effects">Pointer addressing sufficient memory to store n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenEffects(System.Int32)">
            <summary>Generates one or more effect objects.</summary>
            <param name="n">Number of Effect object identifiers to generate.</param>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenEffect">
            <summary>Generates a single effect object.</summary>
            <returns>A handle to the generated effect object.</returns>
            <remarks>
            <para>The GenEffects function is used to create one or more Effect objects. An Effect object stores an effect type and a set of parameter values to control that Effect. In order to use an Effect it must be attached to an Auxiliary Effect Slot object.</para>
            <para>After creation an Effect has no type (EfxEffectType.Null), so before it can be used to store a set of parameters, the application must specify what type of effect should be stored in the object, using Effect() with EfxEffecti.</para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenEffect(System.UInt32@)">
            <summary>Generates a single effect object.</summary>
            <param name="effect">A handle to the generated effect object.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32,System.UInt32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32,System.Int32@)">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="n">Number of Effects to be deleted.</param>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffects(System.Int32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffects(System.UInt32[])">
            <summary>The DeleteEffects function is used to delete and free resources for Effect objects previously created with GenEffects.</summary>
            <param name="effects">Pointer to n Effect object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffect(System.Int32)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteEffect(System.UInt32@)">
            <summary>This function deletes one Effect only.</summary>
            <param name="effect">Pointer to an effect name/handle identifying the Effect Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsEffect(System.UInt32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsEffect(System.Int32)">
            <summary>The IsEffect function is used to determine if an object identifier is a valid Effect object.</summary>
            <param name="eid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Effect, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffecti,System.Int32)">
            <summary>This function is used to set integer properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffectf,System.Single)">
            <summary>This function is used to set floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffectf,System.Single)">
            <summary>This function is used to set floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to set 3 floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Effect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to set 3 floating-point properties on Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="values">Pointer to Math.Vector3.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffecti,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffectf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.UInt32,WaveEngine.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to retrieve 3 floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetEffect(System.Int32,WaveEngine.Audio.OpenAL.EfxEffect3f,OpenTK.Vector3@)">
            <summary>This function is used to retrieve 3 floating-point properties from Effect objects.</summary>
            <param name="eid">Effect object identifier.</param>
            <param name="param">Effect property to retrieve.</param>
            <param name="values">A Math.Vector3 to hold the values.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32,System.UInt32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32,System.Int32@)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <param name="filters">Pointer addressing sufficient memory to store n Filter object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenFilters(System.Int32)">
            <summary>The GenFilters function is used to create one or more Filter objects. A Filter object stores a filter type and a set of parameter values to control that Filter. Filter objects can be attached to Sources as Direct Filters or Auxiliary Send Filters.</summary>
            <remarks>After creation a Filter has no type (EfxFilterType.Null), so before it can be used to store a set of parameters, the application must specify what type of filter should be stored in the object, using Filter() with EfxFilteri.</remarks>
            <param name="n">Number of Filters to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Filter object identifiers.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenFilter">
            <summary>This function generates only one Filter.</summary>
            <returns>Storage Int32 for the new filter name/handle.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenFilter(System.UInt32@)">
            <summary>This function generates only one Filter.</summary>
            <param name="filter">Storage UInt32 for the new filter name/handle.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32,System.UInt32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32,System.Int32@)">
            <summary>The DeleteFilters function is used to delete and free resources for Filter objects previously created with GenFilters.</summary>
            <param name="n">Number of Filters to be deleted.</param>
            <param name="filters">Pointer to n Filter object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilters(System.UInt32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilters(System.Int32[])">
            <summary>This function deletes one Filter only.</summary>
            <param name="filters">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilter(System.Int32)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteFilter(System.UInt32@)">
            <summary>This function deletes one Filter only.</summary>
            <param name="filter">Pointer to an filter name/handle identifying the Filter Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsFilter(System.UInt32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsFilter(System.Int32)">
            <summary>The IsFilter function is used to determine if an object identifier is a valid Filter object.</summary>
            <param name="fid">Effect identifier to validate.</param>
            <returns>True if the identifier is a valid Filter, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Filter(System.UInt32,WaveEngine.Audio.OpenAL.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Filter(System.Int32,WaveEngine.Audio.OpenAL.EfxFilteri,System.Int32)">
            <summary>This function is used to set integer properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Filter(System.UInt32,WaveEngine.Audio.OpenAL.EfxFilterf,System.Single)">
            <summary>This function is used to set floating-point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.Filter(System.Int32,WaveEngine.Audio.OpenAL.EfxFilterf,System.Single)">
            <summary>This function is used to set floating-point properties on Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="param">Effect property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetFilter(System.UInt32,WaveEngine.Audio.OpenAL.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetFilter(System.Int32,WaveEngine.Audio.OpenAL.EfxFilteri,System.Int32@)">
            <summary>This function is used to retrieve integer properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetFilter(System.UInt32,WaveEngine.Audio.OpenAL.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetFilter(System.Int32,WaveEngine.Audio.OpenAL.EfxFilterf,System.Single@)">
            <summary>This function is used to retrieve floating-point properties from Filter objects.</summary>
            <param name="fid">Filter object identifier.</param>
            <param name="pname">Effect property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <param name="slots">Pointer addressing sufficient memory to store n Effect Slot object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlots(System.Int32)">
            <summary>The GenAuxiliaryEffectSlots function is used to create one or more Auxiliary Effect Slots. The number of slots that can be created will be dependant upon the Open AL device used.</summary>
            <remarks>An application should check the OpenAL error state after making this call to determine if the Effect Slot was successfully created. If the function call fails then none of the requested Effect Slots are created. A good strategy for creating any OpenAL object is to use a for-loop and generate one object each loop iteration and then check for an error condition. If an error is set then the loop can be broken and the application can determine if sufficient resources are available.</remarks>
            <param name="n">Number of Auxiliary Effect Slots to be created.</param>
            <returns>Pointer addressing sufficient memory to store n Effect Slot object identifiers.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlot">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage Int32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GenAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function generates only one Auxiliary Effect Slot.</summary>
            <returns>Storage UInt32 for the new auxiliary effect slot name/handle.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.UInt32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="n">Number of Auxiliary Effect Slots to be deleted.</param>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.Int32[])">
            <summary>The DeleteAuxiliaryEffectSlots function is used to delete and free resources for Auxiliary Effect Slots previously created with GenAuxiliaryEffectSlots.</summary>
            <param name="slots">Pointer to n Effect Slot object identifiers.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlots(System.UInt32[])">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slots">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlot(System.Int32)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.DeleteAuxiliaryEffectSlot(System.UInt32@)">
            <summary>This function deletes one AuxiliaryEffectSlot only.</summary>
            <param name="slot">Pointer to an auxiliary effect slot name/handle identifying the Auxiliary Effect Slot Object to be deleted.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsAuxiliaryEffectSlot(System.UInt32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.IsAuxiliaryEffectSlot(System.Int32)">
            <summary>The IsAuxiliaryEffectSlot function is used to determine if an object identifier is a valid Auxiliary Effect Slot object.</summary>
            <param name="slot">Effect Slot object identifier to validate.</param>
            <returns>True if the identifier is a valid Auxiliary Effect Slot, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,WaveEngine.Audio.OpenAL.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.Int32,WaveEngine.Audio.OpenAL.EfxAuxiliaryi,System.Int32)">
            <summary>This function is used to set integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.UInt32,WaveEngine.Audio.OpenAL.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating-point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.AuxiliaryEffectSlot(System.Int32,WaveEngine.Audio.OpenAL.EfxAuxiliaryf,System.Single)">
            <summary>This function is used to set floating-point properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="param">Auxiliary Effect Slot property to set.</param>
            <param name="value">Floating-point value.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,WaveEngine.Audio.OpenAL.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,WaveEngine.Audio.OpenAL.EfxAuxiliaryi,System.Int32@)">
            <summary>This function is used to retrieve integer properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where integer value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.UInt32,WaveEngine.Audio.OpenAL.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.GetAuxiliaryEffectSlot(System.Int32,WaveEngine.Audio.OpenAL.EfxAuxiliaryf,System.Single@)">
            <summary>This function is used to retrieve floating properties on Auxiliary Effect Slot objects.</summary>
            <param name="asid">Auxiliary Effect Slot object identifier.</param>
            <param name="pname">Auxiliary Effect Slot property to retrieve.</param>
            <param name="value">Address where floating-point value will be stored.</param>
        </member>
        <member name="P:WaveEngine.Audio.OpenAL.EffectsExtension.IsInitialized">
            <summary>Returns True if the EFX Extension has been found and could be initialized.</summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.EffectsExtension.#ctor">
            <summary>
            Constructs a new EffectsExtension instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EffectsExtension.ReverbPresets">
            <summary>EAX Reverb Presets in legacy format - use ConvertReverbParameters() to convert to EFX EAX Reverb Presets for use with the OpenAL Effects Extension.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxEffectf">
            <summary>A list of valid 32-bit Float Effect/GetEffect parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Lowering the value adds more coloration to the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. The default 1.0f provides the highest density. Reducing diffusion gives the reverberation a more "grainy" character that is especially noticeable with percussive sound sources. If you set a diffusion value of 0.0f, the later reverberation sounds like a succession of distinct echoes. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbGain">
            <summary>The Reverb Gain property is the master volume control for the reflected sound - both early reflections and reverberation - that the reverb effect adds to all sound sources. Ranges from 1.0 (0db) (the maximum amount) to 0.0 (-100db) (no reflected sound at all) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbGainHF">
            <summary>The Reverb Gain HF property further tweaks reflected sound by attenuating it at high frequencies. It controls a low-pass filter that applies globally to the reflected sound of all sound sources feeding the particular instance of the reverb effect. Ranges from 1.0f (0db) (no filter) to 0.0f (-100db) (virtually no reflected sound) are accepted. Units: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0 (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbDecayHFRatio">
            <summary>The Decay HF Ratio property sets the spectral quality of the Decay Time parameter. It is the ratio of high-frequency decay time relative to the time set by Decay Time.. Unit: linear multiplier Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbReflectionsGain">
            <summary>The Reflections Gain property controls the overall amount of initial reflections relative to the Gain property. The value of Reflections Gain ranges from a maximum of 3.16f (+10 dB) to a minimum of 0.0f (-100 dB) (no initial reflections at all), and is corrected by the value of the Gain property. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbReflectionsDelay">
            <summary>The Reflections Delay property is the amount of delay between the arrival time of the direct path from the source to the first reflection from the source. It ranges from 0 to 300 milliseconds. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. The value of Late Reverb Gain ranges from a maximum of 10.0f (+20 dB) to a minimum of 0.0f (-100 dB) (no late reverberation at all). Unit: Linear gain Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium and applies to reflected sound only. Unit: Linear gain per meter Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL's Rolloff Factor, but operates on reverb sound instead of direct-path sound. Unit: Linear multiplier Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ChorusRate">
            <summary>This property sets the modulation rate of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: Hz Range [0.0f .. 10.0f] Default: 1.1f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ChorusDepth">
            <summary>This property controls the amount by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 0.1f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ChorusFeedback">
            <summary>This property controls the amount of processed signal that is fed back to the input of the chorus effect. Negative values will reverse the phase of the feedback signal. At full magnitude the identical sample will repeat endlessly. Range [-1.0f .. +1.0f] Default: +0.25f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.ChorusDelay">
            <summary>This property controls the average amount of time the sample is delayed before it is played back, and with feedback, the amount of time between iterations of the sample. Larger values lower the pitch. Unit: Seconds Range [0.0f .. 0.016f] Default: 0.016f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.DistortionEdge">
            <summary>This property controls the shape of the distortion. The higher the value for Edge, the "dirtier" and "fuzzier" the effect. Range [0.0f .. 1.0f] Default: 0.2f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.DistortionGain">
            <summary>This property allows you to attenuate the distorted sound. Range [0.01f .. 1.0f] Default: 0.05f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.DistortionLowpassCutoff">
            <summary>Input signals can have a low pass filter applied, to limit the amount of high frequency signal feeding into the distortion effect. Unit: Hz Range [80.0f .. 24000.0f] Default: 8000.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.DistortionEQCenter">
            <summary>This property controls the frequency at which the post-distortion attenuation (Distortion Gain) is active. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.DistortionEQBandwidth">
            <summary>This property controls the bandwidth of the post-distortion attenuation. Unit: Hz Range [80.0f .. 24000.0f] Default: 3600.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EchoDelay">
            <summary>This property controls the delay between the original sound and the first "tap", or echo instance. Subsequently, the value for Echo Delay is used to determine the time delay between each "second tap" and the next "first tap". Unit: Seconds Range [0.0f .. 0.207f] Default: 0.1f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EchoLRDelay">
            <summary>This property controls the delay between the "first tap" and the "second tap". Subsequently, the value for Echo LR Delay is used to determine the time delay between each "first tap" and the next "second tap". Unit: Seconds Range [0.0f .. 0.404f] Default: 0.1f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EchoDamping">
            <summary>This property controls the amount of high frequency damping applied to each echo. As the sound is subsequently fed back for further echoes, damping results in an echo which progressively gets softer in tone as well as intensity. Range [0.0f .. 0.99f] Default: 0.5f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EchoFeedback">
            <summary>This property controls the amount of feedback the output signal fed back into the input. Use this parameter to create "cascading" echoes. At full magnitude, the identical sample will repeat endlessly. Below full magnitude, the sample will repeat and fade. Range [0.0f .. 1.0f] Default: 0.5f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EchoSpread">
            <summary>This property controls how hard panned the individual echoes are. With a value of 1.0f, the first "tap" will be panned hard left, and the second "tap" hard right. –1.0f gives the opposite result and values near to 0.0f result in less emphasized panning. Range [-1.0f .. +1.0f] Default: -1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.FlangerRate">
            <summary>The number of times per second the low-frequency oscillator controlling the amount of delay repeats. Range [0.0f .. 10.0f] Default: 0.27f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.FlangerDepth">
            <summary>The ratio by which the delay time is modulated by the low-frequency oscillator. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.FlangerFeedback">
            <summary>This is the amount of the output signal level fed back into the effect's input. A negative value will reverse the phase of the feedback signal. Range [-1.0f .. +1.0f] Default: -0.5f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.FlangerDelay">
            <summary>The average amount of time the sample is delayed before it is played back. When used with the Feedback property it's the amount of time between iterations of the sample. Unit: Seconds Range [0.0f .. 0.004f] Default: 0.002f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.FrequencyShifterFrequency">
            <summary>This is the carrier frequency. For carrier frequencies below the audible range, the single sideband modulator may produce phaser effects, spatial effects or a slight pitch-shift. As the carrier frequency increases, the timbre of the sound is affected. Unit: Hz Range [0.0f .. 24000.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.VocalMorpherRate">
            <summary>This controls the frequency of the low-frequency oscillator used to morph between the two phoneme filters. Unit: Hz Range [0.0f .. 10.0f] Default: 1.41f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.RingModulatorFrequency">
            <summary>This is the frequency of the carrier signal. If the carrier signal is slowly varying (less than 20 Hz), the result is a slow amplitude variation effect (tremolo). Unit: Hz Range [0.0f .. 8000.0f] Default: 440.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.RingModulatorHighpassCutoff">
            <summary>This controls the cutoff frequency at which the input signal is high-pass filtered before being ring modulated. Unit: Hz Range [0.0f .. 24000.0f] Default: 800.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.AutowahAttackTime">
            <summary>This property controls the time the filtering effect takes to sweep from minimum to maximum center frequency when it is triggered by input signal. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.AutowahReleaseTime">
            <summary>This property controls the time the filtering effect takes to sweep from maximum back to base center frequency, when the input signal ends. Unit: Seconds Range [0.0001f .. 1.0f] Default: 0.06f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.AutowahResonance">
            <summary>This property controls the resonant peak, sometimes known as emphasis or Q, of the auto-wah band-pass filter. Range [2.0f .. 1000.0f] Default: 1000.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.AutowahPeakGain">
            <summary>This property controls the input signal level at which the band-pass filter will be fully opened. Range [0.00003f .. 31621.0f] Default: 11.22f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerLowGain">
            <summary>This property controls amount of cut or boost on the low frequency range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerLowCutoff">
            <summary>This property controls the low frequency below which signal will be cut off. Unit: Hz Range [50.0f .. 800.0f] Default: 200.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid1Gain">
            <summary>This property allows you to cut/boost signal on the "mid1" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid1Center">
            <summary>This property sets the center frequency for the "mid1" range. Unit: Hz Range [200.0f .. 3000.0f] Default: 500.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid1Width">
            <summary>This property controls the width of the "mid1" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid2Gain">
            <summary>This property allows you to cut/boost signal on the "mid2" range. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid2Center">
            <summary>This property sets the center frequency for the "mid2" range. Unit: Hz Range [1000.0f .. 8000.0f] Default: 3000.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerMid2Width">
            <summary>This property controls the width of the "mid2" range. Range [0.01f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerHighGain">
            <summary>This property allows to cut/boost the signal at high frequencies. Range [0.126f .. 7.943f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EqualizerHighCutoff">
            <summary>This property controls the high frequency above which signal will be cut off. Unit: Hz Range [4000.0f .. 16000.0f] Default: 6000.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbDensity">
            <summary>Reverb Modal Density controls the coloration of the late reverb. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbDiffusion">
            <summary>The Reverb Diffusion property controls the echo density in the reverberation decay. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbGain">
            <summary>Reverb Gain controls the level of the reverberant sound in an environment. A high level of reverb is characteristic of rooms with highly reflective walls and/or small dimensions. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.32f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbGainHF">
            <summary>Gain HF is used to attenuate the high frequency content of all the reflected sound in an environment. You can use this property to give a room specific spectral characteristic. Unit: Linear gain Range [0.0f .. 1.0f] Default: 0.89f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbGainLF">
            <summary>Gain LF is the low frequency counterpart to Gain HF. Use this to reduce or boost the low frequency content in an environment. Unit: Linear gain Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbDecayTime">
            <summary>The Decay Time property sets the reverberation decay time. It ranges from 0.1f (typically a small room with very dead surfaces) to 20.0f (typically a large room with very live surfaces). Unit: Seconds Range [0.1f .. 20.0f] Default: 1.49f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbDecayHFRatio">
            <summary>Decay HF Ratio scales the decay time of high frequencies relative to the value of the Decay Time property. By changing this value, you are changing the amount of time it takes for the high frequencies to decay compared to the mid frequencies of the reverb. Range [0.1f .. 2.0f] Default: 0.83f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbDecayLFRatio">
            <summary>Decay LF Ratio scales the decay time of low frequencies in the reverberation in the same manner that Decay HF Ratio handles high frequencies. Unit: Linear multiplier Range [0.1f .. 2.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbReflectionsGain">
            <summary>Reflections Gain sets the level of the early reflections in an environment. Early reflections are used as a cue for determining the size of the environment we are in. Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbReflectionsDelay">
            <summary>Reflections Delay controls the amount of time it takes for the first reflected wave front to reach the listener, relative to the arrival of the direct-path sound. Unit: Seconds Range [0.0f .. 0.3f] Default: 0.007f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbLateReverbGain">
            <summary>The Late Reverb Gain property controls the overall amount of later reverberation relative to the Gain property. Range [0.0f .. 10.0f] Default: 1.26f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbLateReverbDelay">
            <summary>The Late Reverb Delay property defines the begin time of the late reverberation relative to the time of the initial reflection (the first of the early reflections). It ranges from 0 to 100 milliseconds. Unit: Seconds Range [0.0f .. 0.1f] Default: 0.011f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbEchoTime">
            <summary>Echo Time controls the rate at which the cyclic echo repeats itself along the reverberation decay. Range [0.075f .. 0.25f] Default: 0.25f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbEchoDepth">
            <summary>Echo Depth introduces a cyclic echo in the reverberation decay, which will be noticeable with transient or percussive sounds. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbModulationTime">
            <summary>Modulation Time controls the speed of the rate of periodic changes in pitch (vibrato). Range [0.04f .. 4.0f] Default: 0.25f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbModulationDepth">
            <summary>Modulation Depth controls the amount of pitch change. Low values of Diffusion will contribute to reinforcing the perceived effect by reducing the mixing of overlapping reflections in the reverberation decay. Range [0.0f .. 1.0f] Default: 0.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbAirAbsorptionGainHF">
            <summary>The Air Absorption Gain HF property controls the distance-dependent attenuation at high frequencies caused by the propagation medium. It applies to reflected sound only. Range [0.892f .. 1.0f] Default: 0.994f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbHFReference">
            <summary>The property HF reference determines the frequency at which the high-frequency effects created by Reverb properties are measured. Unit: Hz Range [1000.0f .. 20000.0f] Default: 5000.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbLFReference">
            <summary>The property LF reference determines the frequency at which the low-frequency effects created by Reverb properties are measured. Unit: Hz Range [20.0f .. 1000.0f] Default: 250.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectf.EaxReverbRoomRolloffFactor">
            <summary>The Room Rolloff Factor property is one of two methods available to attenuate the reflected sound (containing both reflections and reverberation) according to source-listener distance. It's defined the same way as OpenAL Rolloff Factor, but operates on reverb sound instead of direct-path sound. Range [0.0f .. 10.0f] Default: 0.0f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxEffect3f">
            <summary>A list of valid Math.Vector3 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffect3f.EaxReverbLateReverbPan">
            <summary>Reverb Pan does for the Reverb what Reflections Pan does for the Reflections. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>  
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffect3f.EaxReverbReflectionsPan">
            <summary>This Vector3 controls the spatial distribution of the cluster of early reflections. The direction of this vector controls the global direction of the reflections, while its magnitude controls how focused the reflections are towards this direction. For legacy reasons this Vector3 follows a left-handed co-ordinate system! Note that OpenAL uses a right-handed coordinate system. Unit: Vector3 of length 0f to 1f Default: {0.0f, 0.0f, 0.0f}</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxEffecti">
            <summary>A list of valid Int32 Effect/GetEffect parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.ChorusWaveform">
            <summary>This property sets the waveform shape of the low-frequency oscillator that controls the delay time of the delayed signals. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.ChorusPhase">
            <summary>This property controls the phase difference between the left and right low-frequency oscillators. At zero degrees the two low-frequency oscillators are synchronized. Unit: Degrees Range [-180 .. 180] Default: 90</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.FlangerWaveform">
            <summary>Selects the shape of the low-frequency oscillator waveform that controls the amount of the delay of the sampled signal. Unit: (0) Sinusoid, (1) Triangle Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.FlangerPhase">
            <summary>This changes the phase difference between the left and right low-frequency oscillator's. At zero degrees the two low-frequency oscillators are synchronized. Range [-180 .. +180] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.FrequencyShifterLeftDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.FrequencyShifterRightDirection">
            <summary>These select which internal signals are added together to produce the output. Unit: (0) Down, (1) Up, (2) Off Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeA">
            <summary>Sets the vocal morpher 4-band formant filter A, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 0, "Phoneme A"</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeACoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter A in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeB">
            <summary>Sets the vocal morpher 4-band formant filter B, used to impose vocal tract effects upon the input signal. The vocal morpher is not necessarily intended for use on voice signals; it is primarily intended for pitched noise effects, vocal-like wind effects, etc. Unit: Use enum EfxFormantFilterSettings Range [0 .. 29] Default: 10, "Phoneme ER"</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.VocalMorpherPhonemeBCoarseTuning">
            <summary>This is used to adjust the pitch of phoneme filter B in 1-semitone increments. Unit: Semitones Range [-24 .. +24] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.VocalMorpherWaveform">
            <summary>This controls the shape of the low-frequency oscillator used to morph between the two phoneme filters. Unit: (0) Sinusoid, (1) Triangle, (2) Sawtooth Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.PitchShifterCoarseTune">
            <summary>This sets the number of semitones by which the pitch is shifted. There are 12 semitones per octave. Unit: Semitones Range [-12 .. +12] Default: +12</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.PitchShifterFineTune">
            <summary>This sets the number of cents between Semitones a pitch is shifted. A Cent is 1/100th of a Semitone. Unit: Cents Range [-50 .. +50] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.RingModulatorWaveform">
            <summary>This controls which waveform is used as the carrier signal. Traditional ring modulator and tremolo effects generally use a sinusoidal carrier. Unit: (0) Sinusoid, (1) Sawtooth, (2) Square Range [0 .. 2] Default: 0</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.CompressorOnoff">
            <summary>Enabling this will result in audio exhibiting smaller variation in intensity between the loudest and quietest portions. Unit: (0) Off, (1) On Range [0 .. 1] Default: 1</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.ReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property Air Absorption HF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.EaxReverbDecayHFLimit">
            <summary>When this flag is set, the high-frequency decay time automatically stays below a limit value that's derived from the setting of the property AirAbsorptionGainHF. Unit: (0) False, (1) True Range [False, True] Default: True</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffecti.EffectType">
            <summary>Used with the enum EfxEffectType as it's parameter.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings">
            <summary>Vocal morpher effect parameters. If both parameters are set to the same phoneme, that determines the filtering effect that will be heard. If these two parameters are set to different phonemes, the filtering effect will morph between the two settings at a rate specified by EfxEffectf.VocalMorpherRate.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeA">
            <summary>
            The A phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeE">
            <summary>
            The E phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeI">
            <summary>
            The I phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeO">
            <summary>
            The O phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeU">
            <summary>
            The U phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAA">
            <summary>
            The AA phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAE">
            <summary>
            The AE phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAH">
            <summary>
            The AH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeAO">
            <summary>
            The AO phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeEH">
            <summary>
            The EH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeER">
            <summary>
            The ER phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeIH">
            <summary>
            The IH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeIY">
            <summary>
            The IY phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeUH">
            <summary>
            The UH phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeUW">
            <summary>
            The UW phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeB">
            <summary>
            The B phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeD">
            <summary>
            The D phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeF">
            <summary>
            The F phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeG">
            <summary>
            The G phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeJ">
            <summary>
            The J phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeK">
            <summary>
            The K phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeL">
            <summary>
            The L phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeM">
            <summary>
            The M phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeN">
            <summary>
            The N phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeP">
            <summary>
            The P phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeR">
            <summary>
            The R phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeS">
            <summary>
            The S phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeT">
            <summary>
            The T phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeV">
            <summary>
            The V phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFormantFilterSettings.VocalMorpherPhonemeZ">
            <summary>
            The Z phoneme of the vocal morpher.
            </summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxEffectType">
            <summary>Effect type definitions to be used with EfxEffecti.EffectType.</summary>  
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Null">
            <summary>No Effect, disable. This Effect type is used when an Effect object is initially created.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Reverb">
            <summary>The Reverb effect is the standard Effects Extension's environmental reverberation effect. It is available on all Generic Software and Generic Hardware devices.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Chorus">
            <summary>The Chorus effect essentially replays the input audio accompanied by another slightly delayed version of the signal, creating a "doubling" effect.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Distortion">
            <summary>The Distortion effect simulates turning up (overdriving) the gain stage on a guitar amplifier or adding a distortion pedal to an instrument's output.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Echo">
            <summary>The Echo effect generates discrete, delayed instances of the input signal.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Flanger">
            <summary>The Flanger effect creates a "tearing" or "whooshing" sound, like a jet flying overhead.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.FrequencyShifter">
            <summary>The Frequency shifter is a single-sideband modulator, which translates all the component frequencies of the input signal by an equal amount.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.VocalMorpher">
            <summary>The Vocal morpher consists of a pair of 4-band formant filters, used to impose vocal tract effects upon the input signal.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.PitchShifter">
            <summary>The Pitch shifter applies time-invariant pitch shifting to the input signal, over a one octave range and controllable at a semi-tone and cent resolution.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.RingModulator">
            <summary>The Ring modulator multiplies an input signal by a carrier signal in the time domain, resulting in tremolo or inharmonic effects.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Autowah">
            <summary>The Auto-wah effect emulates the sound of a wah-wah pedal used with an electric guitar, or a mute on a brass instrument.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Compressor">
            <summary>The Compressor will boost quieter portions of the audio, while louder portions will stay the same or may even be reduced.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.Equalizer">
            <summary>The Equalizer is very flexible, providing tonal control over four different adjustable frequency ranges.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxEffectType.EaxReverb">
            <summary>The EAX Reverb has a more advanced parameter set than EfxEffectType.Reverb, but is only natively supported on devices that support the EAX 3.0 or above.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxAuxiliaryi">
            <summary>A list of valid Int32 AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxAuxiliaryi.EffectslotEffect">
            <summary>This property is used to attach an Effect object to the Auxiliary Effect Slot object. After the attachment, the Auxiliary Effect Slot object will contain the effect type and have the same effect parameters that were stored in the Effect object. Any Sources feeding the Auxiliary Effect Slot will immediate feed the new effect type and new effect parameters.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxAuxiliaryi.EffectslotAuxiliarySendAuto">
            <summary>This property is used to enable or disable automatic send adjustments based on the physical positions of the sources and the listener. This property should be enabled when an application wishes to use a reverb effect to simulate the environment surrounding a listener or a collection of Sources. Range [False, True] Default: True </summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxAuxiliaryf">
            <summary>A list of valid 32-bits Float AuxiliaryEffectSlot/GetAuxiliaryEffectSlot parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxAuxiliaryf.EffectslotGain">
            <summary>This property is used to specify an output level for the Auxiliary Effect Slot. Setting the gain to 0.0f mutes the output. Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxFilterf">
            <summary>A list of valid 32-bits Float Filter/GetFilter parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.LowpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.LowpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.HighpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.HighpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.BandpassGain">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.BandpassGainLF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterf.BandpassGainHF">
            <summary>Range [0.0f .. 1.0f] Default: 1.0f</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxFilteri">
            <summary>A list of valid Int32 Filter/GetFilter parameters</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilteri.FilterType">
            <summary>Used with the enum EfxFilterType as Parameter to select a filter logic.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.EfxFilterType">
            <summary>Filter type definitions to be used with EfxFilteri.FilterType.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterType.Null">
            <summary>No Filter, disable. This Filter type is used when a Filter object is initially created.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterType.Lowpass">
            <summary>A low-pass filter is used to remove high frequency content from a signal.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterType.Highpass">
            <summary>Currently not implemented. A high-pass filter is used to remove low frequency content from a signal.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.EfxFilterType.Bandpass">
            <summary>Currently not implemented. A band-pass filter is used to remove high and low frequency content from a signal.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.XRamExtension">
            <summary>
            The X-Ram Extension is provided on the top-end Sound Blaster X-Fi solutions (Sound Blaster X-Fi Fatal1ty, Sound Blaster X-Fi Elite Pro, or later).
            These products feature 64MB of X-Ram that can only be used for audio purposes, which can be controlled by this Extension.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.OpenAL.XRamExtension.IsInitialized">
            <summary>Returns True if the X-Ram Extension has been found and could be initialized.</summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.XRamExtension.#ctor">
            <summary>
            Constructs a new XRamExtension instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Audio.OpenAL.XRamExtension.GetRamSize">
            <summary>Query total amount of X-RAM in bytes.</summary>
        </member>
        <member name="P:WaveEngine.Audio.OpenAL.XRamExtension.GetRamFree">
            <summary>Query free X-RAM available in bytes.</summary>
        </member>
        <member name="T:WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage">
            <summary>This enum is used to abstract the need of using AL.GetEnumValue() with the Extension. The values do NOT correspond to AL_STORAGE_* tokens!</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage.Automatic">
            <summary>Put an Open AL Buffer into X-RAM if memory is available, otherwise use host RAM.  This is the default mode.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage.Hardware">
            <summary>Force an Open AL Buffer into X-RAM, good for non-streaming buffers.</summary>
        </member>
        <member name="F:WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage.Accessible">
            <summary>Force an Open AL Buffer into 'accessible' (currently host) RAM, good for streaming buffers.</summary>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.XRamExtension.SetBufferMode(System.Int32,System.UInt32@,WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.XRamExtension.SetBufferMode(System.Int32,System.Int32@,WaveEngine.Audio.OpenAL.XRamExtension.XRamStorage)">
            <summary>This function is used to set the storage Mode of an array of OpenAL Buffers.</summary>
            <param name="n">The number of OpenAL Buffers pointed to by buffer.</param>
            <param name="buffer">An array of OpenAL Buffer handles.</param>
            <param name="mode">The storage mode that should be used for all the given buffers. Should be the value of one of the following enum names: XRamStorage.Automatic, XRamStorage.Hardware, XRamStorage.Accessible</param>
            <returns>True if all the Buffers were successfully set to the requested storage mode, False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.XRamExtension.GetBufferMode(System.UInt32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="M:WaveEngine.Audio.OpenAL.XRamExtension.GetBufferMode(System.Int32@)">
            <summary>This function is used to retrieve the storage Mode of a single OpenAL Buffer.</summary>
            <param name="buffer">The handle of an OpenAL Buffer.</param>
            <returns>The current Mode of the Buffer.</returns>
        </member>
        <member name="T:WaveEngineAndroid.Adapter.Guide.InAppPurchase">
            <summary>
            In App Purchase mock implementation
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.ANDROID_PUBLICKEY">
            <summary>
            Android public key lookup key
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.isConnected">
            <summary>
            If is initialized 
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.requestId">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.semaphore">
            <summary>
            The semaphore
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.adapter">
            <summary>
            Android Adapter
            </summary>
        </member>
        <member name="F:WaveEngineAndroid.Adapter.Guide.InAppPurchase.serviceConnection">
            <summary>
            InApp Billing service connection
            </summary>        
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineAndroid.Adapter.Guide.InAppPurchase" /> class.
            </summary>
            <param name="adapter">The adapter</param>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>If the store is</returns>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">List of products to obtain the details</param>
            <returns>Detailed product list</returns>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            if user acepted product pruchase
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            the receipt
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            void task
            </returns>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)">
            <summary>
            Handle the Activity.OnActivityResult() method
            </summary>
            <param name="requestCode">The request code</param>
            <param name="resultCode">The result code</param>
            <param name="data">The data</param>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.GetPurchasesInfo">
            <summary>
            Get purchases
            </summary>        
            <returns>An awaitable task that return the purchase info</returns>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.Connected">
            <summary>
            The billing service is connected
            </summary>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.Guide.InAppPurchase.Disconnected">
            <summary>
            The billing service is disconnected
            </summary>
        </member>
        <member name="T:WaveEngineAndroid.Adapter.IAndroidAdapter">
            <summary>
            Android Adapter Extension
            </summary>
        </member>
        <member name="P:WaveEngineAndroid.Adapter.IAndroidAdapter.Context">
            <summary>
            The context
            </summary>
        </member>
        <member name="P:WaveEngineAndroid.Adapter.IAndroidAdapter.Window">
            <summary>
            Gets the window.
            </summary>
            <value>
            The window.
            </value>
        </member>
        <member name="T:WaveEngineAndroid.Adapter.SplashView">
            <summary>
            
            </summary>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.SplashView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineAndroid.Adapter.SplashView"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.SplashView.#ctor(Android.Content.Context,Android.Util.IAttributeSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineAndroid.Adapter.SplashView"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="attrs">The attrs.</param>
            <param name="defStyle">The def style.</param>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.SplashView.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngineAndroid.Adapter.SplashView.OnConfigurationChanged(Android.Content.Res.Configuration)">
            <summary>
            Called when the current configuration of the resources being used
            by the application have changed.
            </summary>
            <param name="newConfig">The new resource configuration.</param>
            <since version="Added in API level 8" />
            <remarks>
              <para tool="javadoc-to-mdoc">Called when the current configuration of the resources being used
            by the application have changed.  You can use this to decide when
            to reload resources that can changed based on orientation and other
            configuration characterstics.  You only need to use this if you are
            not relying on the normal <c><see cref="T:Android.App.Activity" /></c> mechanism of
            recreating the activity instance upon a configuration change.</para>
              <para tool="javadoc-to-mdoc">
              <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/View.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
              </format>
              </para>
            </remarks>
        </member>
    </members>
</doc>
