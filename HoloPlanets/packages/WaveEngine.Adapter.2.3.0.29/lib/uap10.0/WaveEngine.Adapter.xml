<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Adapter</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Adapter.Adapter">
            <summary>
            The UWP adapter instance
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.CameraCapture">
            <summary>
            Gets the camera capture instance
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.PlatformFamily">
            <summary>
            Gets the Platform Cpu architecture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.ListenersFactory">
            <summary>
            Gets the sensor factory.
            </summary>
            <value>
            The sensor factory.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GetPlatformFamily">
            <summary>
            Gets the platformFamily
            </summary>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Application">
            <summary>
            The default implementation of XAML application
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.isFullScreen">
            <summary>
            Is full screen
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.FullScreen">
            <summary>
            Gets or sets a value indicating whether the app is fullscreen
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.BaseApplication">
            <summary>
            Base application used in hololens projects.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Adapter">
            <summary>
            Adapter instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Height">
            <summary>
            Windowed height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Width">
            <summary>
            Windowed height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.WindowTitle">
            <summary>
            Windows title.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.FullScreen">
            <summary>
            Full screem enable.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.#ctor">
            <summary>
            Initializes a instance of the <see cref="T:WaveEngine.Adapter.BaseApplication"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Initialize">
            <summary>
            Initilize the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Update(System.TimeSpan)">
            <summary>
            Update frame.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Draw(System.TimeSpan)">
            <summary>
            Draw frame.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.OnSuspending">
            <summary>
            Occurs when the application is suspending.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.OnResuming">
            <summary>
            Occurs when the application is resuming.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Dispose">
            <summary>
            Dipose all the resources used by this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Exit">
            <summary>
            Exits this instance. 
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Render">
            <summary>
            Base render.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.CommonDX.DeviceManager">
            <summary>
            This class handles device creation for Direct2D, Direct3D, DirectWrite
            and WIC.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.d2dFactory">
            <summary>
            The D2DFactory
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.d2dDevice">
            <summary>
            The D2DDevice
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.d2dContext">
            <summary>
            The D2DContext
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.dwriteFactory">
            <summary>
            The DirectWrite Factory
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.wicFactory">
            <summary>
            The WIC Imaging Factory
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.d3dDevice">
            <summary>
            The D3D Device
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.d3dContext">
            <summary>
            The D3D device context
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.dxgiDeviceManager">
            <summary>
            The DXGI device manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.featureLevel">
            <summary>
            The D3D feature level
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.DeviceManager.dpi">
            <summary>
            The DPI
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.DeviceDirect3D">
            <summary>
            Gets the Direct3D11 device.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.ContextDirect3D">
            <summary>
            Gets the Direct3D11 context.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.FactoryDirect2D">
            <summary>
            Gets the Direct2D factory.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.DeviceDirect2D">
            <summary>
            Gets the Direct2D device.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.ContextDirect2D">
            <summary>
            Gets the Direct2D context.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.FactoryDirectWrite">
            <summary>
            Gets the DirectWrite factory.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.WICFactory">
            <summary>
            Gets the WIC factory.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.Dpi">
            <summary>
            Gets or sets the DPI.
            </summary>
            <remarks>
            if the dpi is modified.
            </remarks>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.DeviceManager.DxgiDeviceManager">
            <summary>
            Gets the DXGI Device Manager
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.CommonDX.DeviceManager.OnInitialize">
            <summary>
            This event is fired when the DeviceMamanger is initialized by the <see cref="M:WaveEngine.Adapter.CommonDX.DeviceManager.Initialize"/> method.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.CommonDX.DeviceManager.OnDpiChanged">
            <summary>
            The DPI is changed
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.DeviceManager.Initialize">
            <summary>
            Initialize this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.DeviceManager.CreateDeviceIndependentResources">
            <summary>
            Creates device independent resources.
            </summary>
            <remarks>
            This method is called at the initialization of this instance.
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.DeviceManager.CreateDeviceResources">
            <summary>
            Creates device resources. 
            </summary>
            <remarks>
            This method is called at the initialization of this instance.
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.DeviceManager.DisplayProperties_DpiChanged(Windows.Graphics.Display.DisplayInformation,System.Object)">
            <summary>
            The DPI is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget">
            <summary>
            Target to render to a <see cref="T:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget"/>.
            </summary>
            <remarks>
            This class should be use when efficient DirectX-XAML interop is required.
            </remarks>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.panel">
            <summary>
            The SwapChain panel control
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.nativePanel">
            <summary>
            Natrive swap chain access
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.cachedSize">
            <summary>
            Cached size
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.CurrentControlBounds">
            <summary>
            Gets the current control bounds
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.Width">
            <summary>
            Gets the target width
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.Height">
            <summary>
            Gets the target height
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.#ctor(Windows.UI.Xaml.Controls.SwapChainPanel)">
            <summary>
            Initializes a new <see cref="T:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget"/> instance
            </summary>
            <param name="panel">The <see cref="T:Windows.UI.Xaml.Controls.SwapChainPanel"/> to render to</param>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.OnPanelSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
            The swapchain panel size is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.OnWindowSizeChanged(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
            The window size is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.CreateSwapChainDescription">
            <summary>
            Create the swapchain panel description
            </summary>
            <returns>the created swapchain description</returns>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.CreateSwapChain(SharpDX.DXGI.Factory2,SharpDX.Direct3D11.Device1,SharpDX.DXGI.SwapChainDescription1)">
            <summary>
            Creates a SwapChainPanel
            </summary>
            <param name="factory">The DXGI factory</param>
            <param name="device">The Direct3D Device</param>
            <param name="desc">The swapchain description</param>
            <returns>The swapchain</returns>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainPanelTarget.SetCompositeScale(System.Single,System.Single)">
            <summary>
            Set the composite scale
            </summary>
            <param name="compositionScaleX">The composite scale x</param>
            <param name="compositionScaleY">The composite scale y</param>
        </member>
        <member name="T:WaveEngine.Adapter.CommonDX.SwapChainTargetBase">
            <summary>
            Base class to render to a SwapChain.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.swapChain">
            <summary>
            The swap chain
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.CompositionScaleX">
            <summary>
            Gets or sets the CompositionScale X.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.CompositionScaleY">
            <summary>
            Gets or sets the CompositionScale Y.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.#ctor">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.Width">
            <summary>
            Gets the Width of the swap chain to create or resize.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.Height">
            <summary>
            Gets the Height of the swap chain to create or resize.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.SwapChain">
            <summary>
            Gets the swapchain instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.Present">
            <summary>
            Present the results to the swap chain.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.CreateSizeDependentResources">
            <summary>
            Create size dependent resources for the DirectX app
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.CreateSwapChainDescription">
            <summary>
            Creates the swap chain description.
            </summary>
            <returns>A swap chain description</returns>
            <remarks>
            This method can be overloaded in order to modify default parameters.
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.SwapChainTargetBase.CreateSwapChain(SharpDX.DXGI.Factory2,SharpDX.Direct3D11.Device1,SharpDX.DXGI.SwapChainDescription1)">
            <summary>
            Creates the swap chain.
            </summary>
            <param name="factory">The DXGI factory</param>
            <param name="device">The D3D11 device</param>
            <param name="desc">The swap chain description</param>
            <returns>An instance of swap chain</returns>
        </member>
        <member name="T:WaveEngine.Adapter.CommonDX.TargetBase">
            <summary>
            This class is an abstract class responsible to maintain a list of 
            render task, render target view / depth stencil view and Direct2D 
            render target.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.TargetBase.renderTargetView">
            <summary>
            The rendertarget view
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.TargetBase.depthStencilView">
            <summary>
            The depth stencil view
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.TargetBase.bitmapTarget">
            <summary>
            The bitmap target
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.CommonDX.TargetBase.backBuffer">
            <summary>
            The backbuffer
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.DeviceManager">
            <summary>
            Gets the <see cref="P:WaveEngine.Adapter.CommonDX.TargetBase.DeviceManager"/> attached to this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.RenderTargetView">
            <summary>
            Gets the Direct3D RenderTargetView used by this target.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.BackBuffer">
            <summary>
            Gets the Direct3D Backbuffer used by this target.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.DepthStencilView">
            <summary>
            Gets the Direct3D DepthStencilView used by this target.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.BitmapTarget2D">
            <summary>
            Gets the Direct2D RenderTarget used by this target.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.RenderTargetBounds">
            <summary>
            Gets the bounds of the control linked to this render target
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.RenderTargetSize">
            <summary>
            Gets the size in pixels of the Direct3D RenderTarget
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.ControlBounds">
            <summary>
            Gets the bounds of the control linked to this render target
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.CommonDX.TargetBase.CurrentControlBounds">
            <summary>
            Gets the current bounds of the control linked to this render target
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.CommonDX.TargetBase.OnSizeChanged">
            <summary>
            Event fired when size of the underlying control is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.CommonDX.TargetBase.OnRender">
            <summary>
            Event fired when rendering is performed by this target
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.TargetBase.#ctor">
            <summary>
            Initializes a new <see cref="T:WaveEngine.Adapter.CommonDX.TargetBase"/> instance 
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.TargetBase.Initialize(WaveEngine.Adapter.CommonDX.DeviceManager)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="deviceManager">The device manager</param>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.TargetBase.UpdateForSizeChange">
            <summary>
            Notifies for size changed
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.CommonDX.TargetBase.RenderAll">
            <summary>
            Render all events registered on event <see cref="E:WaveEngine.Adapter.CommonDX.TargetBase.OnRender"/>
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously 
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <returns>The index of the option selected</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="T:WaveEngine.Adapter.Guide.InAppPurchase">
            <summary>
            In App purchase implementation for Windows Phone
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>If the store is</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">Product id list</param>
            <returns>
            Complete product list
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            if user acepted product pruchase
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            The receipt
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
        </member>
        <member name="M:WaveEngine.Adapter.Guide.InAppPurchase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.smoothing">
            <summary>
            Smoothing rate; larger numbers cause more smoothing. The default
            should be fine for most applications.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.sensorError">
            <summary>
            Empirically determined error in accelerometer readings. It seems
            to be off by a constant offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Exist">
            <summary>
            Checks if accelerometer sensor exist
            </summary>
            <returns>
            True if accelerometer exist.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Register">
            <summary>
            Registers the events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Unregister">
            <summary>
            Uns the register events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>
            The state of the accelerometer
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.CompassListener">
            <summary>
            Compass Listener
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassListener.compass">
            <summary>
            The compass
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Compass_ReadingChanged(Windows.Devices.Sensors.Compass,Windows.Devices.Sensors.CompassReadingChangedEventArgs)">
            <summary>
            Compass_s the reading changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Windows.Devices.Sensors.CompassReadingChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeListener.gyroscope">
            <summary>
            The gyroscope
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.GyroscopeListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>
            Gyroscope state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Gyroscope_ReadingChanged(Windows.Devices.Sensors.Gyrometer,Windows.Devices.Sensors.GyrometerReadingChangedEventArgs)">
            <summary>
            Handles the CurrentValueChanged event of the gyroscope control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Windows.Devices.Sensors.GyrometerReadingChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.InputManager">
            <summary>
            This class Handle all input devices
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.ThumbDeadZoneLeft">
            <summary>
            The left thumb dead zone (The same value as XInput.Gamepad)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.ThumbDeadZoneRight">
            <summary>
            The right thumb dead zone (The same value as XInput.Gamepad)
            </summary>s
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.adapter">
            <summary>
            Adapter pointer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.keyboardState">
            <summary>
            KeyboardState struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.touchPanelState">
            <summary>
            TouchPanelState struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouseState">
            <summary>
            MouseState struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.isMobile">
            <summary>
            Whether the target platform is mobile.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnOrientationChanged">
            <summary>
            Occur with the orientation has changed.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnInputChanged">
            <summary>
            Occur when a nen device is detected.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.gamePadState">
            <summary>
            The game pad state (4 XBOX GamePad)
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.OnGamepadRemoved(System.Object,Windows.Gaming.Input.Gamepad)">
            <summary>
            Called when a gamepad has been removed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The gamepad event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.OnGamepadAdded(System.Object,Windows.Gaming.Input.Gamepad)">
            <summary>
            Called when a gamepad has been added
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The gamepad event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.DisplayInformationOrientationChanged(Windows.Graphics.Display.DisplayInformation,System.Object)">
            <summary>
            Occur when the display orientation has changed.
            </summary>
            <param name="sender">the sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.KeyboardGetState">
            <summary>
            Get the current keyboard state.
            </summary>
            <returns>The updated keyboardstate struct.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.MouseGetState">
            <summary>
            Get the current mouse state.
            </summary>
            <returns>The updated mousestate struct.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Get the current state of a gamepad identify by index.
            </summary>
            <param name="playerIndex">The gamepad index.</param>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.TouchPanelGetState">
            <summary>
            Get the current touchpanel state.
            </summary>
            <returns>The updated touchstate struct.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.DisplayOrientationGetState">
            <summary>
            Get the current display orientation.
            </summary>
            <returns>The updated DisplayOrientationstate struct.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Dispose">
            <summary>
            Dispose all instance used on this class.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.ListenerFactoryStore">
            <summary>
            Listener Factory for apps
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.orientationSensor">
            <summary>
            The orientati
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.orientationFix">
            <summary>
            Orientation fix quaternion
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.GyroscopeListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>
            Gyroscope state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.Vibrate">
            <summary>
            Vibrate class
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.Vibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate.</param>
        </member>
        <member name="P:WaveEngine.Adapter.IO.IOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsContentFile(System.String)">
            <summary>
            Contents the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">A search pattern that supports single-character ("?") and multicharacter ("*") wildcards.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>        
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">A search pattern that supports single-character ("?") and multicharacter ("*") wildcards.</param>
            <returns>
            The result.
            </returns>        
            <exception cref="!:SystemUtils.NotImplementedException"></exception>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone">
            <summary>
            Manages a microphone device.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone.RecordingState">
            <summary>
            Recording state of the WaveIn
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.Stopped">
            <summary>
            Stopped state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.Recording">
            <summary>
            Recording state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.RequestedStop">
            <summary>
            Request stop state.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.Microphone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is currently recording
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone on the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.isInitialized">
            <summary>
            Is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.audioCaptureStream">
            <summary>
            The audio capture stream
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordingState">
            <summary>
            Recording state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.writer">
            <summary>
            Wave writer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordingFormat">
            <summary>
            Recording format.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordSoundPath">
            <summary>
            Path of recorded sound
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordedSound">
            <summary>
            Recorded sound.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.Microphone"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start(System.String)">
            <summary>
            Starts the record saving into a file.
            </summary>
            <param name="recordSoundPath">Path of the record file.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.GetRecordedSound">
            <summary>
            Get a soundbase object
            </summary>
            <returns>
            The recorded sound.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.OnAudioStreamActivated(WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat)">
            <summary>
            Called when [audio stream activated].
            </summary>
            <param name="waveFormat">The wave format.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.OnAudioBufferCaptured(WaveEngine.Common.Media.MicrophoneDataEventArgs)">
            <summary>
            Raises the <see cref="E:AudioBufferCaptured" /> event.
            </summary>
            <param name="e">The <see cref="T:WaveEngine.Common.Media.MicrophoneDataEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.DestroyRecordedSound">
            <summary>
            Delete the recorded sound ( if any )
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.WriteToFile(System.Byte[],System.Int32)">
            <summary>
            Writes the buffer to the file
            </summary>
            <param name="buffer">byte buffer</param>
            <param name="bytesRecorded">bytes recordd</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Common.IAgileObject">
            <summary>
            Guid defined in Windows Kits\8.0\Include\um\ObjIdlbase.h
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WmaVoice9">
            <summary>WAVE_FORMAT_WMAVOICE9 </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DspGroupTrueSpeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.RawAac">
            <summary>
            WAVE_FORMAT_RAW_AAC1
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WindowsMediaAudio">
            <summary>
            Windows Media Audio, WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WindowsMediaAudioProfessional">
            <summary>
            Windows Media Audio Professional WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WindowsMediaAudioLosseless">
            <summary>
            Windows Media Audio Lossless, WAVE_FORMAT_WMAUDIO_LOSSLESS
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WindowsMediaAudioSpdif">
            <summary>
            Windows Media Audio Professional over SPDIF WAVE_FORMAT_WMASPDIF (0x0164)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MPEG_ADTS_AAC">
            <summary>
            Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
            The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_ADTS_AAC.
            </summary>
            <remarks>
            The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels, 
            prior to applying spectral band replication (SBR) or parametric stereo (PS) tools, if present.
            No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MPEG_RAW_AAC">
            <summary></summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MPEG_LOAS">
            <summary>
            MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
            The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_LOAS.
            </summary>
            <remarks>
            The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels, 
            prior to applying spectral SBR or PS tools, if present.
            No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.NOKIA_MPEG_ADTS_AAC">
            <summary>NOKIA_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.NOKIA_MPEG_RAW_AAC">
            <summary>NOKIA_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.VODAFONE_MPEG_ADTS_AAC">
            <summary>VODAFONE_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.VODAFONE_MPEG_RAW_AAC">
            <summary>VODAFONE_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.MPEG_HEAAC">
            <summary>
            High-Efficiency Advanced Audio Coding (HE-AAC) stream.
            The format block is an HEAACWAVEFORMAT structure.
            </summary>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DVM">
            <summary>WAVE_FORMAT_DVM</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceAsyncOperation">
            <summary>
            Represents an asynchronous operation activating a WASAPI interface and provides a method to retrieve the results of the activation.
            
            Guid defined in Windows Kits\8.0\Include\um\mmdeviceapi.h
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceAsyncOperation.GetActivateResult(System.Int32@,System.Object@)">
            <summary>
            Gets the results of an asynchronous activation of a WASAPI interface initiated by an application calling the ActivateAudioInterfaceAsync function.
            </summary>
            <param name="activateResult">result code</param>
            <param name="activateInterface"></param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceCompletionHandler">
            <summary>
            Provides a callback to indicate that activation of a WASAPI interface is complete.
            
            Guid defined in Windows Kits\8.0\Include\um\mmdeviceapi.h
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceCompletionHandler.ActivateCompleted(WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceAsyncOperation)">
            <summary>
            Indicates that activation of a WASAPI interface is complete and results are available.
            </summary>
            <param name="activateOperation">An interface representing the asynchronous operation of activating the requested WASAPI interface</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.WindowsMultimediaDevice">
            <summary>
            Wrapper for Mmdevapi.dll, used to get an audio client for capturing
            
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd316556(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.WindowsMultimediaDevice.ActivateAudioInterfaceAsync(System.String,System.Guid,System.IntPtr,WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceCompletionHandler,WaveEngine.Adapter.Media.CoreAudio.Components.MMDevice.IActivateAudioInterfaceAsyncOperation@)">
            <summary>
            Enables Windows Store apps to access preexisting Component Object Model (COM) interfaces in the WASAPI family.
            
            http://msdn.microsoft.com/en-us/library/windows/desktop/jj128298(v=vs.85).aspx
            </summary>
            <param name="deviceInterfacePath">A device interface ID for an audio device. 
                This is normally retrieved from a DeviceInformation object or one of the methods of the MediaDevice class.</param>
            <param name="riid">The IID of a COM interface in the WASAPI family, such as IAudioClient.</param>
            <param name="activationParams">Interface-specific activation parameters.</param>
            <param name="completionHandler">An interface implemented by the caller that is called by Windows when the result of the activation procedure is available.</param>
            <param name="createAsync">Returns an IActivateAudioInterfaceAsyncOperation interface that represents the asynchronous operation of activating the requested WASAPI interface.</param>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.AudioClientBufferFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.AudioClientBufferFlags.Silent">
            <summary>
            AUDCLNT_BUFFERFLAGS_SILENT
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.AudioClientBufferFlags.TimestampError">
            <summary>
            AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.Constants">
            <summary>
            Defined in Windows Kits\8.0\Include\um\Audioclient.h
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioCaptureClient">
            <summary>
            Guid defined in Windows Kits\8.0\Include\um\Audioclient.h
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient">
            <summary>
            The IAudioClient interface enables a client to create and initialize an audio stream between an audio application and the audio engine (for a shared-mode stream) 
            or the hardware buffer of an audio endpoint device (for an exclusive-mode stream). 
            
            Guid defined in Windows Kits\8.0\Include\um\Audioclient.h
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.Initialize(WaveEngine.Adapter.Media.CoreAudio.Enumerations.AudioClientShareMode,WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags,System.Int64,System.Int64,WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat,System.Guid@)">
            <summary>
            Initializes the audio stream.
            </summary>
            <param name="shareMode">The sharing mode for the connection. 
                Through this parameter, the client tells the audio engine whether it wants to share the audio endpoint device with other clients. 
                The client should set this parameter to one of the following: AUDCLNT_SHAREMODE_EXCLUSIVE, AUDCLNT_SHAREMODE_SHARED</param>
            <param name="StreamFlags">Flags to control creation of the stream. 
                The client should set this parameter to 0 or to the bitwise OR of one or more of the AUDCLNT_STREAMFLAGS_XXX Constants or the AUDCLNT_SESSIONFLAGS_XXX Constants.</param>
            <param name="hnsBufferDuration">The buffer capacity as a time value. 
                This parameter is of type REFERENCE_TIME and is expressed in 100-nanosecond units. 
                This parameter contains the buffer size that the caller requests for the buffer that the audio application will share with the audio engine (in shared mode) 
                or with the endpoint device (in exclusive mode). If the call succeeds, the method allocates a buffer that is a least this large.</param>
            <param name="hnsPeriodicity">The device period. 
                This parameter can be nonzero only in exclusive mode. 
                In shared mode, always set this parameter to 0. 
                In exclusive mode, this parameter specifies the requested scheduling period for successive buffer accesses by the audio endpoint device. 
                If the requested device period lies outside the range that is set by the device's minimum period and the system's maximum period, then the method clamps the period to that range. 
                If this parameter is 0, the method sets the device period to its default value. 
                To obtain the default device period, call the IAudioClient::GetDevicePeriod method. 
                If the AUDCLNT_STREAMFLAGS_EVENTCALLBACK stream flag is set and AUDCLNT_SHAREMODE_EXCLUSIVE is set as the ShareMode, 
                then hnsPeriodicity must be nonzero and equal to hnsBufferDuration.</param>
            <param name="pFormat">Pointer to a format descriptor. This parameter must point to a valid format descriptor of type WAVEFORMATEX (or WAVEFORMATEXTENSIBLE). </param>
            <param name="AudioSessionGuid">Pointer to a session GUID. 
                This parameter points to a GUID value that identifies the audio session that the stream belongs to. 
                If the GUID identifies a session that has been previously opened, the method adds the stream to that session. 
                If the GUID does not identify an existing session, the method opens a new session and adds the stream to that session. 
                The stream remains a member of the same session for its lifetime. Setting this parameter to NULL is equivalent to passing a pointer to a GUID_NULL value.</param>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            <param name="bufferSize">Pointer to a UINT32 variable into which the method writes the number of audio frames that the buffer can hold.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetStreamLatency">
            <summary>
            The GetStreamLatency method retrieves the maximum latency for the current stream and can be called any time after the stream has been initialized.
            </summary>
            <returns>Pointer to a REFERENCE_TIME variable into which the method writes a time value representing the latency. The time is expressed in 100-nanosecond units.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetCurrentPadding(System.Int32@)">
            <summary>
            The GetCurrentPadding method retrieves the number of frames of padding in the endpoint buffer.
            </summary>
            <param name="currentPadding">Pointer to a UINT32 variable into which the method writes the frame count (the number of audio frames of padding in the buffer).</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.IsFormatSupported(WaveEngine.Adapter.Media.CoreAudio.Enumerations.AudioClientShareMode,WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormat,WaveEngine.Adapter.Media.CoreAudio.Common.WaveFormatExtensible@)">
            <summary>
            The IsFormatSupported method indicates whether the audio endpoint device supports a particular stream format.
            </summary>
            <param name="shareMode">The sharing mode for the stream format. 
                Through this parameter, the client indicates whether it wants to use the specified format in exclusive mode or shared mode. 
                The client should set this parameter to one of the following AUDCLNT_SHAREMODE enumeration values: AUDCLNT_SHAREMODE_EXCLUSIVE, AUDCLNT_SHAREMODE_SHARED
            </param>
            <param name="pFormat">Pointer to the specified stream format. 
                This parameter points to a caller-allocated format descriptor of type WAVEFORMATEX or WAVEFORMATEXTENSIBLE. 
                The client writes a format description to this structure before calling this method.</param>
            <param name="closestMatchFormat">Pointer to a pointer variable into which the method writes the address of a WAVEFORMATEX or WAVEFORMATEXTENSIBLE structure. 
                This structure specifies the supported format that is closest to the format that the client specified through the pFormat parameter. 
                For shared mode (that is, if the ShareMode parameter is AUDCLNT_SHAREMODE_SHARED), set ppClosestMatch to point to a valid, non-NULL pointer variable. 
                For exclusive mode, set ppClosestMatch to NULL. 
                The method allocates the storage for the structure. 
                The caller is responsible for freeing the storage, when it is no longer needed, by calling the CoTaskMemFree function. 
                If the IsFormatSupported call fails and ppClosestMatch is non-NULL, the method sets *ppClosestMatch to NULL.</param>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetMixFormat(System.IntPtr@)">
            <summary>
            The GetMixFormat method retrieves the stream format that the audio engine uses for its internal processing of shared-mode streams.
            </summary>
            <param name="deviceFormatPointer">Pointer to a pointer variable into which the method writes the address of the mix format. 
                This parameter must be a valid, non-NULL pointer to a pointer variable. 
                The method writes the address of a WAVEFORMATEX (or WAVEFORMATEXTENSIBLE) structure to this variable. 
                The method allocates the storage for the structure. 
                The caller is responsible for freeing the storage, when it is no longer needed, by calling the CoTaskMemFree function. 
                If the GetMixFormat call fails, *ppDeviceFormat is NULL.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetDevicePeriod(System.Int64@,System.Int64@)">
            <summary>
            The GetDevicePeriod method retrieves the length of the periodic interval separating successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
            <param name="defaultDevicePeriod">Pointer to a REFERENCE_TIME variable into which the method writes a time value specifying the default interval 
                between periodic processing passes by the audio engine. The time is expressed in 100-nanosecond units. </param>
            <param name="minimumDevicePeriod">Pointer to a REFERENCE_TIME variable into which the method writes a time value specifying the minimum interval 
                between periodic processing passes by the audio endpoint device. The time is expressed in 100-nanosecond units.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.Start">
            <summary>
            The Start method starts the audio stream.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.Stop">
            <summary>
            The Stop method stops the audio stream.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.Reset">
            <summary>
            The Reset method resets the audio stream.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            The SetEventHandle method sets the event handle that the system signals when an audio buffer is ready to be processed by the client.
            </summary>
            <param name="eventHandle">The event handle.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CoreAudio.Components.WASAPI.IAudioClient.GetService(System.Guid,System.Object@)">
            <summary>
            The GetService method accesses additional services from the audio client object.
            </summary>
            <param name="interfaceId">The interface ID for the requested service.</param>
            <param name="interfacePointer">Pointer to a pointer variable into which the method writes the address of an instance of the requested interface. </param>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.CrossProcess">
            <summary>
            The audio stream will be a member of a cross-process audio session (AUDCLNT_STREAMFLAGS_CROSSPROCESS)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.Loopback">
            <summary>
            The audio stream will operate in loopback mode (AUDCLNT_STREAMFLAGS_LOOPBACK)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.EventCallback">
            <summary>
            Processing of the audio buffer by the client will be event driven (AUDCLNT_STREAMFLAGS_EVENTCALLBACK)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.NoPersist">
            <summary>
            The volume and mute settings for an audio session will not persist (AUDCLNT_STREAMFLAGS_NOPERSIST)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.AudioClientStreamFlags.RateAdjust">
            <summary>
            This constant is new in Windows 7. The sample rate of the stream is adjusted to a rate specified by an application (AUDCLNT_STREAMFLAGS_RATEADJUST)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Constants.KsMedia.WAVEFORMATEX">
            <summary>
            Defined in Windows Kits\8.0\Include\shared\ksmedia.h
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CoreAudio.Enumerations.AudioClientShareMode">
            <summary>
            The sharing mode for a stream.
            
            Defined in Windows Kits\8.0\Include\um\AudioSessionTypes.h
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Enumerations.AudioClientShareMode.Shared">
            <summary>
            AUDCLNT_SHAREMODE_SHARED
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CoreAudio.Enumerations.AudioClientShareMode.Exclusive">
            <summary>
            AUDCLNT_SHAREMODE_EXCLUSIVE
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.DXDepth">
            <summary>
            Render target for DirectX interop.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.DepthView">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.ResourceView">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.Depth">
            <summary>
            Render target texture.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeDepthView">
            <summary>
            Gets the native depth view.
            </summary>
            <value>
            The native depth view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeResourceView">
            <summary>
            Gets the native resource view.
            </summary>
            <value>
            The native resource view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeTexture">
            <summary>
            Gets the native texture.
            </summary>
            <value>
            The native texture.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXDepth"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="depthTexture">The depthTexture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.DXRenderTarget">
            <summary>
            Render target for DirectX interop.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.TargetView">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.ResourceView">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.Target">
            <summary>
            Render target texture.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeTargetView">
            <summary>
            Gets the native target view.
            </summary>
            <value>
            The native target view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeResourceView">
            <summary>
            Gets the native resource view.
            </summary>
            <value>
            The native resource view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeTexture">
            <summary>
            Gets the native texture.
            </summary>
            <value>
            The native texture.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXRenderTarget"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="renderTarget">The render target.</param>
            <param name="rtDescription">The rendertargetview description.</param>
            <param name="srDescription">The shaderResourceview description.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXRenderTarget"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="renderTarget">The render target.</param>
            <param name="rtDescription">The rendertargetview description.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.DXTexture">
            <summary>
            Texture for the DirectX render target.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.Resource">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.Texture">
            <summary>
            DirectX texture.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXTexture"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.Graphics">
            <summary>
            Manages all graphical functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.vertexBufferCount">
            <summary>
            Number of vertex buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.indexBufferCount">
            <summary>
            Number of index buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.cachedClearColor">
            <summary>
            Cached clear color.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.Graphics"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="clearFlags">The clear flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.TopologyFromType(WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Topologies from type.
            </summary>
            <param name="type">The type.</param>
            <returns>DirectX topology type.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.CalcIndexCount(System.Int32,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Calcs the index count.
            </summary>
            <param name="numPrimitives">The num primitives.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <returns>Number of primitive indices to draw.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.GraphicsDevice">
            <summary>
            Represents a DirectX graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DeviceDirect3D">
            <summary>
            Direct3D graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.ContextDirect3D">
            <summary>
            Direct3D context.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DxgiDeviceManager">
            <summary>
            The DXGI device manager
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.RenderTargetViews">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DepthStencilView">
            <summary>
            Depth stencil view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.BackBuffer">
            <summary>
            Back buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.SwapChain">
            <summary>
            Current SwapChain.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DepthStencil">
            <summary>
            Directx depth stencil
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.Width">
            <summary>
            Back buffer width.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.Height">
            <summary>
            Back buffer height.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.GraphicsDevice.IsSrgbModeEnabled">
            <summary>
            Gets or sets a value indicating whether the renderer need to draw in SRGB mode.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.GraphicsHelpers">
            <summary>
            Helper graphic functions.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementsFromVertexBufferFormat(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Inputs the elements from vertex buffer format.
            </summary>
            <param name="vbFormat">The vb format.</param>
            <returns>DirectX input element array for the vertex format.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementName(WaveEngine.Common.Graphics.VertexElementUsage)">
            <summary>
            Inputs the name of the element.
            </summary>
            <param name="usage">The usage.</param>
            <returns>Element name of the usage.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementSize(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Inputs the size of the element.
            </summary>
            <param name="format">The format.</param>
            <returns>Size of the input element.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementFormat(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Inputs the element format.
            </summary>
            <param name="format">The format.</param>
            <returns>Format of the input element.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.ToSharpDXVector(WaveEngine.Common.Math.Vector3,SharpDX.Mathematics.Interop.RawVector3@)">
            <summary>
            Transform Wave Vector3 to SharpDX Vector3
            </summary>
            <param name="vector">Wave vector</param>
            <param name="sharpDXVector">SharpDX vector</param>
        </member>
        <member name="T:WaveEngine.DirectX.HLSLShader">
            <summary>
            Represents a HLSL shader object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.Techniques">
            <summary>
            Dictionary of techniques available.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.matricesStream">
            <summary>
            Data stream for matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.MatricesBox">
            <summary>
            Data box for matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.parametersStream">
            <summary>
            Data stream for parameter buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.ParametersBox">
            <summary>
            Data stream for parameter box.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.MatrixBuffer">
            <summary>
            Matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.ParameterBuffer">
            <summary>
            Parameter buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.#ctor(WaveEngine.Common.Graphics.Effect,SharpDX.Direct3D11.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.HLSLShader"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="d3dDevice">The D3D device.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.SetMatrixData(System.Object)">
            <summary>
            Sets the matrix data.
            </summary>
            <param name="matrices">The matrices.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.SetParameterData(System.Object)">
            <summary>
            Sets the parameter data.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:WaveEngine.DirectX.HLSLTechnique">
            <summary>
            Technique of a HLSL shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.device">
            <summary>
            DirectX parent device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.inputLayouts">
            <summary>
            Dictionary of input layouts supported by the technique.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.vertexShaderSource">
            <summary>
            Compiled vertex shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.VertexShader">
            <summary>
            Vertex shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.PixelShader">
            <summary>
            Pixel shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.VertexBufferFormat">
            <summary>
            The vertex buffer format
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLTechnique.#ctor(SharpDX.Direct3D11.Device,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.HLSLTechnique"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbFormat">The vb format.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLTechnique.GetLayoutForVertexFormat(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Gets the layout for vertex format.
            </summary>
            <param name="vbFormat">The vb format.</param>
            <returns>DirectX input layout of the vertex format.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.MipmapChain">
            <summary>
            Internal class to fix a memory leak problem with dataStream object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.streams">
            <summary>
            The streams
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.rectangles">
            <summary>
            The rectangles
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.currentIndex">
            <summary>
            The current index
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.MipmapChain.Rectangles">
            <summary>
            Gets the rectangles.
            </summary>
            <value>
            The rectangles.
            </value>
            <exception cref="T:System.InvalidOperationException">Mipmap chain hasn't been fully created.</exception>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.MipmapChain" /> class.
            </summary>
            <param name="mipmapCount">The mipmap count.</param>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.AddLevel(System.Byte[],System.Int32)">
            <summary>
            Adds the level.
            </summary>
            <param name="data">The data.</param>
            <param name="pitch">The pitch.</param>
            <exception cref="T:System.InvalidOperationException">Level count exceeds initial array size.</exception>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.RenderState">
            <summary>
            Manages the current render state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.d3dContext">
            <summary>
            Direct3D context.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.cullMode">
            <summary>
            Current cull mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.depthMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.blendMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.fillMode">
            <summary>
            Current fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.samplerMode">
            <summary>
            Current sampler mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.viewport">
            <summary>
            Current viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.defaultViewport">
            <summary>
            Initial viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.rasterizerStates">
            <summary>
            The rasterizer states
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.none">
            <summary>
            No depth operation.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.read">
            <summary>
            Depth read.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.write">
            <summary>
            Depth write.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.additive">
            <summary>
            Additive blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.alphaBlend">
            <summary>
            Alpha blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.opaque">
            <summary>
            Opaque blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.nonPremultiplied">
            <summary>
            Non premultiplied alpha blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.scissorTestEnabled">
            <summary>
            The scissor test enabled
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.scissorRectangle">
            <summary>
            The scissor rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.depthBias">
            <summary>
            The depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.FillMode">
            <summary>
            Gets or sets the Fill mode.
            </summary>
            <value>
            The Fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>
            The depth bias.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.SamplerMode">
            <summary>
            Gets or sets the address mode.
            </summary>
            <value>
            The address mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.RenderState"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.OnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Detect when the screen is resized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The arguments.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.RefreshDefaultViewport">
            <summary>
            Refresh the default viewport
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateRasterizeState(SharpDX.Direct3D11.Device,WaveEngine.Common.Graphics.CullMode,WaveEngine.Common.Graphics.FillMode,WaveEngine.Common.Graphics.DepthBias)">
            <summary>
            Creates the state of the rasterize.
            </summary>
            <param name="device">The device.</param>
            <param name="cullMode">The cull mode.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="depthBias">The depth bias.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateBlendDescription(SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,System.Boolean)">
            <summary>
            Creates the blend description.
            </summary>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="isBlendEnabled">if set to <c>true</c> [is blend enabled].</param>
            <returns>Blend state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateBlendDescription(SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,System.Boolean)">
            <summary>
            Creates the blend description.
            </summary>
            <param name="blendOperation">The blend operation.</param>
            <param name="alphaBlendOperation">The alpha blend operation.</param>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="sourceAlphaBlend">The source alpha blend.</param>
            <param name="destinationAlphaBlend">The destination alpha blend.</param>
            <param name="isBlendEnabled">if set to <c>true</c> [is blend enabled].</param>
            <returns>Blend description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateDepthStencilStateDescription(System.Boolean,SharpDX.Direct3D11.DepthWriteMask)">
            <summary>
            Creates the depth stencil state description.
            </summary>
            <param name="isDepthEnabled">if set to <c>true</c> [is depth enabled].</param>
            <param name="depthWriteMask">The depth write mask.</param>
            <returns>Depth stencil state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.RenderTargetManager">
            <summary>
            Manages render targets.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets or sets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.renderTargetCount">
            <summary>
            Number of render targets created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.depthTextureCount">
            <summary>
            Number of depth texture created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating whether a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.RenderTargetManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="sampleCount">The sample count (MSAA).</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.IntPtr)">
            <summary>
            Create RenderTarget from an existing texture
            </summary>        
            <param name="textureHandle">The texture handle</param>        
            <returns>The renderTarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.RenderTargetViewDescription)">
            <summary>
            Create a new RenderTarget from an existing texture and renderTargetView description.
            </summary>
            <param name="texture">A existing Texture2D.</param>
            <param name="rtDescription">The renderTargetview description.</param>
            <returns>The rendertarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.RenderTargetViewDescription,SharpDX.Direct3D11.ShaderResourceViewDescription)">
            <summary>
            Create a new RenderTarget from an existing texture and descriptions.
            </summary>
            <param name="texture">A existing Texture2D.</param>
            <param name="rtDescription">The renderTargetview description.</param>
            <param name="srDescription">The renderTargetView description.</param>
            <returns>The rendertarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>        
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="sampleCount">The sample count (MSAA).</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="depthBufferDescription">DepthBuffer description</param>        
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depth texture</param>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The render target.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.ShaderManager">
            <summary>
            Creates and manages shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.effects">
            <summary>
            Dictionary of shader objects.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.matrices">
            <summary>
            Matrix buffer for shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.currentTechnique">
            <summary>
            Currently used technique.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.cachedTechnique">
            <summary>
            The chached technique
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.cachedMaterial">
            <summary>
            The cached material
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.pointClamp">
            <summary>
            Point clamp sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.pointWrap">
            <summary>
            Point wrap sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.linearClamp">
            <summary>
            Linear clamp sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.linearWrap">
            <summary>
            Linear wrap sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.anisotropicClamp">
            <summary>
            Anisotropic clamp sampler states.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.anisotropicWrap">
            <summary>
            Anisotropic wrap sampler states.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.ShaderManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>true if the technique exists.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.ResetCachedMaterial">
            <summary>
            Resets the cached material.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the effect.
            </summary>
            <param name="effect">The effect.</param>        
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.SetTechniqueLayout(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Sets the technique layout.
            </summary>
            <param name="vbFormat">The vb format.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateSamplerStateDescription(SharpDX.Direct3D11.TextureAddressMode,SharpDX.Direct3D11.Filter)">
            <summary>
            Creates the sampler state description.
            </summary>
            <param name="addressMode">The address mode.</param>
            <param name="textureFilter">The texture filter.</param>
            <returns>New sampler state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateSamplerStateDescription(SharpDX.Direct3D11.TextureAddressMode,SharpDX.Direct3D11.Filter,System.Int32)">
            <summary>
            Creates the sampler state description.
            </summary>
            <param name="addressMode">The address mode.</param>
            <param name="textureFilter">The texture filter.</param>
            <param name="anisotropyLevel">The anisotropy level.</param>
            <returns>New sampler state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.SoundEffect">
            <summary>
            Represents a sound effect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.Xaudio2">
            <summary>
            XAudio2 object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.X3dAudio">
            <summary>
            X3DAudio object
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.MasteringVoice">
            <summary>
            The mastering voice
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.Buffer">
            <summary>
            Audio buffer object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.SoundBase">
            <summary>
            SoundBase instance.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.SoundFormat">
            <summary>
            Format of the WAV sound.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.DecodedPackets">
            <summary>
            Decoded WAV data.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.XAudio2.MasteringVoice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundEffect"/> class.
            </summary>
            <param name="xaudio2">The xaudio2.</param>
            <param name="masteringVoice">The mastering voice.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Initialize(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Initializes the specified sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>New sound instance.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Play(System.Single,System.Single,System.Boolean)">
            <summary>
            Plays the specified volume.
            </summary>
            <param name="volume">The volume.</param>
            <param name="pan">The pan.</param>
            <param name="looped">if set to <c>true</c> [looped].</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.SoundEffectInstance">
            <summary>
            An instance of a SoundEffect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.SoundEffect">
            <summary>
            Parent SoundEffect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.Voice">
            <summary>
            XAudio2 SourceVoice.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.emitter">
            <summary>
            X3D Sound Emitter
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.listener">
            <summary>
            X3D Sound Listener
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.dspSettings">
            <summary>
            DSP settings
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.volume">
            <summary>
            Volume value.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.pan">
            <summary>
            Pan value
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.pitch">
            <summary>
            Pitch value
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Pan">
            <summary>
            Gets or sets the pan.
            </summary>
            <value>
            The pan.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.IsLooped">
            <summary>
            Gets or sets a value indicating whether this instance is looped.
            </summary>
            <value>
              <c>true</c> if this instance is looped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.#ctor(WaveEngine.DirectX.SoundEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundEffectInstance"/> class.
            </summary>
            <param name="soundEffect">The sound effect.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Voice_StreamEnd">
            <summary>
            Stream end callback.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Apply3D(WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="soundEmitter">The sound emitter</param>
            <param name="soundListener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyVolume(System.Single)">
            <summary>
            Applies the volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyPan(System.Single)">
            <summary>
            Applies the pan.
            </summary>
            <param name="pan">The pan.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyPitch(System.Single)">
            <summary>
            Applies the pitch.
            </summary>
            <param name="pitch">The pitch.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ComputePanMatrix(System.Int32,System.Int32,System.Single)">
            <summary>
            Computes the pan matrix.
            </summary>
            <param name="srcChannels">The source channels.</param>
            <param name="dstChannels">The DST channels.</param>
            <param name="pan">The pan.</param>
            <returns>The pan matrix.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.OnBufferEnd(System.IntPtr)">
            <summary>
            Called when [buffer end].
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:WaveEngine.DirectX.SoundManager">
            <summary>
            Manages everything related to sounds.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.FloatMin">
            <summary>
            Minimum float value
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.soundCount">
            <summary>
            Number of sounds created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.instanceCount">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.xaudio2">
            <summary>
            XAudio2 object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.x3dAudio">
            <summary>
            X3DAudio object
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.masteringVoice">
            <summary>
            XAudio2 mastering voice.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.soundHandles">
            <summary>
            Dictionary of sound handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.instanceHandles">
            <summary>
            Dictionary of instance handles.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Stops the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Enable3DAudio">
            <summary>
            Enable 3d audio
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Dispose(System.Boolean)">
            <summary>
            Dispose the asset container.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="T:WaveEngine.DirectX.TextureManager">
            <summary>
            Handles texture management.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.TextureManager.TextureHandles">
            <summary>
            Gets the texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.textureCount">
            <summary>
            Number of textures created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.TextureManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>        
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Tyep of the returned texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Texture from handle.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXUsage(WaveEngine.Common.Graphics.TextureUsage)">
            <summary>
            To convert from TextureUsage to SharpDX ResourceUsage
            </summary>
            <param name="usage">the textureusage value to convert.</param>
            <returns>the ResourceUsage value.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXCpuAccess(WaveEngine.Common.Graphics.TextureCpuAccess)">
            <summary>
            To convert from TextureCpuAccess to CpuAccessFlags
            </summary>
            <param name="cpuAccess">the TextureCpuAccess to convert.</param>
            <returns>the CpuAccessFlags value.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXFormat(WaveEngine.Common.Graphics.Texture,SharpDX.DXGI.Format@)">
            <summary>
            To convert from TextureFormat to DirectX Format
            </summary>
            <param name="texture">The texture.</param>
            <param name="textureFormat">the out textureFormat.</param>
            <returns>The texture Pitch.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.VideoInfo">
            <summary>
            Video info instance
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.IsInitialized">
            <summary>
            Gets or sets a value indicating whether the video player is initialized
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.VideoInfo"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoInfo.Dispose">
            <summary>
            Dispose video info instance
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.VideoPlayer">
            <summary>
            The video player
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.isInitialized">
            <summary>
            indicates if video player is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.mediaEngine">
            <summary>
            Media engine instance
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.mediaEngineEx">
            <summary>
            Media engine EX instance used to play videos
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.video">
            <summary>
            Current Video info instance
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.textureRefreshed">
            <summary>
            indicate if texture is refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.lockObject">
            <summary>
            Lock object mutex
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.isReadyToPlay">
            <summary>
            The video is ready to play
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.BackgroundColor">
            <summary>
            Gets or sets the background color used to display the video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsPlaying">
            <summary>
            Gets a value indicating whether this media player is playing a video or audio.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the video player is loop
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the video player is muted
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.Volume">
            <summary>
            Gets or sets the video player volume
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.PlayPosition">
            <summary>
            Gets or sets the video play position
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.Video">
            <summary>
            Gets the current video info
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.State">
            <summary>
            Gets the video player state
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.VideoTexture">
            <summary>
            Gets the video texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether Video texture is supported on this device
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.DxTexture">
            <summary>
            Gets he dx texture
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.onComplete">
            <summary>
            Internal complete event handler
            </summary>
        </member>
        <member name="E:WaveEngine.DirectX.VideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.onError">
            <summary>
            Internal error event handler
            </summary>
        </member>
        <member name="E:WaveEngine.DirectX.VideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.VideoPlayer"/> class.
            </summary>
            <param name="adapter">WinRT adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Dispose">
            <summary>
            Release resources of Video Player
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Initialize">
            <summary>
            Lazy initialization of VideoPlayer
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.CreateTexture">
            <summary>
            Create video texture
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.SetVideoInfoMetadata">
            <summary>
            Set the video info metadata
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.OnMediaEngineEvent(SharpDX.MediaFoundation.MediaEngineEvent,System.Int64,System.Int32)">
            <summary>
            Media engine event handler method
            </summary>
            <param name="mediaEvent">media event</param>
            <param name="param1">1st event parameter</param>
            <param name="param2">2nd event parameter</param>
        </member>
    </members>
</doc>
