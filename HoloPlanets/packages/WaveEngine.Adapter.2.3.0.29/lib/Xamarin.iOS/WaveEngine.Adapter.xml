<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Adapter</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Adapter.Adapter">
            <summary>
            Implements an iOS adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.lastError">
            <summary>
            The last error
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.fullScreen">
            <summary>
            The full screen
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.originalWidth">
            <summary>
            The original width
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.originalHeight">
            <summary>
            The original height
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.MainContext">
            <summary>
            The main context
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.BgContext">
            <summary>
            The bg context
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.Sharegroup">
            <summary>
            The sharegroup
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.GameWindow">
            <summary>
            The game window
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UniqueIdKeyName">
            <summary>
            The unique id key name
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.NativeAdVisibilityChanged">
            <summary>
            Occurs when [native ad visibility changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceUniqueID">
            <summary>
            Gets the device unique ID.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AppVersion">
            <summary>
            Gets the app version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OSVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceMake">
            <summary>
            Gets the device make.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.LocaleLanguage">
            <summary>
            Gets the locale language.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.MusicPlayer">
            <summary>
            Gets the music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SoundManager">
            <summary>
            Gets the sound manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Microphone">
            <summary>
            Gets the microphone
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.VideoPlayer">
            <summary>
            Gets the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Guide">
            <summary>
            Gets the guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Vibrate">
            <summary>
            Gets the Vibrate.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InAppPurchase">
            <summary>
            Gets the in app purchases.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.CameraCapture">
            <summary>
            Gets the camera capture instance
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OriginalWidth">
            <summary>
            Gets the width of the original.
            </summary>
            <value>
            The width of the original.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OriginalHeight">
            <summary>
            Gets the height of the original.
            </summary>
            <value>
            The height of the original.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.GameView">
            <summary>
            Gets the game view.
            </summary>
            <value>
            The game view.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.FullScreen">
            <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
            <value>
              <c>true</c> if [full screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdapterType">
            <summary>
            Gets the type of the adapter.
            </summary>
            <value>
            The type of the adapter.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>
            The supported orientations.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
            <value>
            The default orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdvertismentVisible">
            <summary>
            Sets a value indicating whether [advertisment visible].
            </summary>
            <value>
              <c>true</c> if [advertisment visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.PlatformFamily">
            <summary>
            Gets the Platform Cpu architecture
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.#ctor(System.Int32,System.Int32,OpenTK.Platform.iPhoneOS.iPhoneOSGameView)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Adapter"/> class.
            </summary>
            <param name="screenWidth">Width of the screen.</param>
            <param name="screenHeight">Height of the screen.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.CheckError">
            <summary>
            Checks the error.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.ListenersFactory">
            <summary>
            Gets the listeners factory.
            </summary>
            <value>
            The listeners factory.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Adapter.Application">
            <summary>
            Base class for iOS applications.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.window">
            <summary>
            The window
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.GLView">
            <summary>
            The GLView view
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Adapter">
            <summary>
            Gets the parent adapter needed to initialize the application.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.WindowTitle">
            <summary>
            Gets the title of the application window, when available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Width">
            <summary>
            Gets the width, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Height">
            <summary>
            Gets the height, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Application"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Application"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Initialize">
            <summary>
            Called just after creating the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Update(System.TimeSpan)">
            <summary>
            Called when updating the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last update.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Draw(System.TimeSpan)">
            <summary>
            Called when drawing the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last draw.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.GLView">
            <summary>
            OpenGL view used for drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.Application">
            <summary>
            The application
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.depthFramebuffer">
            <summary>
            The depth framebuffer
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.screenWidth">
            <summary>
            The screen width
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.screenHeight">
            <summary>
            The screen height
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.isPaused">
            <summary>
            The is paused
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.displayLink">
            <summary>
            CADisplayLink used to create draw events
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.stopwatch">
            <summary>
            StopWatch used to measure the game time
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.GLView.counter">
            <summary>
            The framebuffer call counter
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.GLView.Adapter">
            <summary>
            Gets the adapter.
            </summary>
            <value>
            The adapter.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.#ctor(Foundation.NSCoder)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.GLView"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.GetLayerClass">
            <summary>
            Gets the layer class.
            </summary>
            <returns>Layer class.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.ConfigureLayer(CoreAnimation.CAEAGLLayer)">
            <summary>
            Configures the layer.
            </summary>
            <param name="eaglLayer">The eagl layer.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.CreateFrameBuffer">
            <summary>
            Creates the frame buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.DestroyFrameBuffer">
            <summary>
            Destroys the frame buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnUpdateFrame(OpenTK.FrameEventArgs)">
            <summary>
            Raises the <see cref="E:UpdateFrame" /> event.
            </summary>
            <param name="e">The <see cref="T:OpenTK.FrameEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.OnRenderFrame(OpenTK.FrameEventArgs)">
            <summary>
            Raises the <see cref="E:RenderFrame" /> event.
            </summary>
            <param name="e">The <see cref="T:OpenTK.FrameEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.InitAdapter">
            <summary>
            Inits the adapter.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.TouchesBegan(Foundation.NSSet,UIKit.UIEvent)">
            <summary>
            Toucheses the began.
            </summary>
            <param name="touches">The touches.</param>
            <param name="evt">The evt.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.TouchesMoved(Foundation.NSSet,UIKit.UIEvent)">
            <summary>
            Toucheses the moved.
            </summary>
            <param name="touches">The touches.</param>
            <param name="evt">The evt.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.TouchesCancelled(Foundation.NSSet,UIKit.UIEvent)">
            <summary>
            Toucheses the cancelled.
            </summary>
            <param name="touches">The touches.</param>
            <param name="evt">The evt.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.TouchesEnded(Foundation.NSSet,UIKit.UIEvent)">
            <summary>
            Toucheses the ended.
            </summary>
            <param name="touches">The touches.</param>
            <param name="evt">The evt.</param>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.CreateDisplayLink">
            <summary>
            Initializes CADisplayLink
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.GLView.FillTouches(Foundation.NSSet)">
            <summary>
            Fills the touches.
            </summary>
            <param name="touches">The touches.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Guide.Guide">
            <summary>
            Provides access to guide services.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Guide.Guide.isKeyboardActive">
            <summary>
            The is keyboard active
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Guide.Guide.ShowKeyboardInputDelegate">
            <summary>
            Delegate for keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <returns>Text entered.</returns>
        </member>
        <member name="F:WaveEngine.Adapter.Guide.Guide.invokeOnMainThreadObj">
            <summary>
            The invoke on main thread obj
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Guide.Guide.keyboardManualEvent">
            <summary>
            The keyboard manual event
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.IsTrialMode">
            <summary>
            Gets a value indicating whether this instance is trial mode.
            </summary>
            <value>
                <c>true</c> if this instance is trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether [simulate trial mode].
            </summary>
            <value>
              <c>true</c> if [simulate trial mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Adapter.Guide.Guide"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Guide.Guide"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the show keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends the show keyboard input.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Resulting text.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.BeginShowMessageBox(System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the show message box.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="callback">The callback.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.EndShowMessageBox(System.IAsyncResult)">
            <summary>
            Ends the show message box.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Result of the message box.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowMessageBoxAsync(System.String,System.String)">
             <summary>
            Show an OK/Cancel message box asyncronously 
             </summary>
             <param name="title">The messagebox title</param>
             <param name="description">The messagebox description</param>        
             <returns>The index of the option selected</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
             <summary>
            Show a text dialog box asynchronously
             </summary>
             <param name="title">The messagebox title</param>
             <param name="description">The messagebox description</param>        
             <param name="defaultText">The default text in the text box</param>
             <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowKeyboardInput(System.String,System.String,System.String)">
            <summary>
            Shows the keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <returns>
            Keyboard input result.
            </returns>
        </member>
        <member name="T:WaveEngine.Adapter.TextFieldAlertView">
            <summary>
            View for text input.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.TextFieldAlertView.textField">
            <summary>
            The text field
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.TextFieldAlertView.title">
            <summary>
            The title
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.TextFieldAlertView.defaultValue">
            <summary>
            The default value
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.TextFieldAlertView.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.TextFieldAlertView"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:WaveEngine.Adapter.TextFieldAlertView.LayoutSubviews">
            <summary>
            Lays out subviews.
            </summary>
            <remarks>
              <para>The default implementation of this method does nothing on iOS 5.1 and earlier. Otherwise, the default implementation uses any constraints you have set to determine the size and position of any subviews.</para>
              <para>Subclasses can override this method as needed to perform more precise layout of their subviews. You should override this method only if the autoresizing and constraint-based behaviors of the subviews do not offer the behavior you want. You can use your implementation to set the frame rectangles of your subviews directly.</para>
              <para>You should not call this method directly. If you want to force a layout update, call the <c><see cref="M:MonoTouch.UIKit.UIView.SetNeedsLayout" /></c> method instead to do so prior to the next drawing update. If you want to update the layout of your views immediately, call the <c><see cref="M:MonoTouch.UIKit.UIView.LayoutIfNeeded" /></c> method.</para>
            </remarks>
        </member>
        <member name="M:WaveEngine.Adapter.TextFieldAlertView.ComposeTextFieldControl">
            <summary>
            Composes the text field control.
            </summary>
            <returns>New text field control.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.TextFieldAlertView.AdjustControlSize">
            <summary>
            Adjusts the size of the control.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AccelerometerListener">
            <summary>
            AccelerometerListener class 
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.motionManager">
            <summary>
            The c m motion manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.lastSensorTime">
            <summary>
            The last sensor time
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.smoothing">
            <summary>
            The smoothing
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.axisSignusCorrection">
            <summary>
            The axis siguns correction
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.#ctor(CoreMotion.CMMotionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.AccelerometerListener"/> class.
            </summary>
            <param name="cMMotionManager">The c m motion manager.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.GetState">
            <summary>
            Gets the Accelerometer state.
            </summary>
            <returns>
            Accelerometer state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Exist">
            <summary>
            Check if the sensor exist
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>        
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Register">
            <summary>
            Registers the events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Unregister">
            <summary>
            Uns the register events.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.InputManager">
            <summary>
            Manages input devices.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.CurrentState">
            <summary>
            The current state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.motionManager">
            <summary>
            The motion manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.oldState">
            <summary>
            The old state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.gamePadState">
            <summary>
            Only one gamepad
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnOrientationChanged">
            <summary>
            Occurs when [on orientation changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnInputChanged">
            <summary>
            Occur when a nen device is detected.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>
            Keyboard state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>
            Mouse state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Games the state of the pad get.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>
            Game pad state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.TouchPanelGetState">
            <summary>
            Touches the state of the panel get.
            </summary>
            <returns>
            Touch panel state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.DisplayOrientationGetState">
            <summary>
            Displays the state of the orientation get.
            </summary>
            <returns>
            Display orientation state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.ListenerFactoryIOS">
            <summary>
            Sensor Factory for IOS
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.ListenerFactoryIOS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.ListenerFactoryIOS"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.Vibrate">
            <summary>
            Vibrate interface
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.Vibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate device with default length
            </summary>
            <param name="milliseconds">Ignored (iOS doesn't expose)</param>
        </member>
        <member name="T:WaveEngine.Adapter.IO.IOManager">
            <summary>
            Input/Output manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.storageFile">
            <summary>
            The storage file
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.IO.IOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.IO.IOManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsContentFile(System.String)">
            <summary>
            Contents the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.StorageFileExists(System.String)">
            <summary>
            Storages the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true if file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CameraCapture">
            <summary>
            iOS Camera capture
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.adapter">
            <summary>
            iOS adapters
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.captureSession">
            <summary>
            Capture session
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.videoConnection">
            <summary>
            Video Connection
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.movieURL">
            <summary>
            Movie capture url
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.assetWriter">
            <summary>
            Asset Writer
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.assetWriterAudioIn">
            <summary>
            Asset Writer audio input
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.assetWriterVideoIn">
            <summary>
            Asset Writer video input
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.movieWritingQueue">
            <summary>
            Dispatch queue
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.previousSecondTimestamps">
            <summary>
            Previous second timestamp
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.previewBufferQueue">
            <summary>
            Preview buffer queue
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.inuse">
            <summary>
            Sample Buffer list
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.videoTextureCache">
            <summary>
            Texture cache
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.textureLock">
            <summary>
            Texture lock object
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.readyToRecordAudio">
            <summary>
            Ready to record audio flag
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.readyToRecordVideo">
            <summary>
            Ready to record video flag
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.recordingWillBeStarted">
            <summary>
            Recording will be started flag
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.recordingWillBeStopped">
            <summary>
            Recording will be stopped flag
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.lastRecordedVideoPath">
            <summary>
            The last recorded video path.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.audioDataOutputDelegate">
            <summary>
            Audio Data output delegate
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.videoDataOutputDelegate">
            <summary>
            Video data output delegate
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.VideoDimensions">
            <summary>
            Gets the video dimension
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.IsRecording">
            <summary>
            Gets a value indicating whether it is recording
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.PreviewTexture">
            <summary>
            Gets preview Texture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.State">
            <summary>
            Gets current state of camera capture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether current iOS device has camera.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.CameraCapture"/> class.
            </summary>
            <param name="adapter">iOS adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StartRecording(System.String)">
            <summary>
            Starts the recording.
            </summary>
            <param name="videoFilePath">Video file path</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StopRecording">
            <summary>
            Stop recording
            </summary>
            <returns>recorded file path</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start camera capture
            </summary>
            <param name="cameraCaptureType">Camera capture type.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Stop">
            <summary>
            Stops the and tears down the capture session.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Update(System.TimeSpan)">
            <summary>
            Update method
            </summary>
            <param name="gameTime">game time.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.VideoDeviceWithPosition(AVFoundation.AVCaptureDevicePosition)">
            <summary>
            Videos the device available for passed in position.
            </summary>
            <returns>
            The available device
            </returns>
            <param name='position'>
            The desired Position.
            </param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.AudioDevice">
            <summary>
            Returns an audio device
            </summary>
            <returns>
            The audio device.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.OrientationChangeNotification(Foundation.NSNotification)">
            <summary>
            Notification method called when the device orientation is changed
            Is used to update capture orientaiton
            </summary>
            <param name="notification">notification object.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.CaptureSessionStoppedRunningNotification(Foundation.NSNotification)">
            <summary>
            Stop recording notification
            </summary>
            <param name="notification">notification object</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.SetupCaptureSession(AVFoundation.AVCaptureDevicePosition)">
            <summary>
            Setup capture session
            </summary>
            <param name="devicePosition">device position</param>
            <returns>true if success</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.UpdateVideoTexture(CoreVideo.CVImageBuffer)">
            <summary>
            Update video texture from a image buffer
            </summary>
            <param name="imageBuffer">image buffer</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.CompleteBufferUse(CoreMedia.CMSampleBuffer)">
            <summary>
            This is used to solve the issue with the movieWriter queue and the DisplayPixelBuffer
            thread not releasing CMSampleBuffers when 
            </summary>
            <param name="buf">sample buffer</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.ShowError(Foundation.NSError)">
            <summary>
            Show error
            </summary>
            <param name="error">error object</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.RemoveFile(Foundation.NSUrl)">
            <summary>
            Remove file from URL
            </summary>
            <param name="fileURL">file url</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.SaveMovieToCameraRoll">
            <summary>
            Saves the movie to the camera roll.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.WriteSampleBuffer(CoreMedia.CMSampleBuffer,Foundation.NSString)">
            <summary>
            Write sample buffer to its current Asset Writer
            </summary>
            <param name="sampleBuffer">sample buffer to write</param>
            <param name="mediaType">buffer type (audio of video)</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.FinishWritingHandle">
            <summary>
            Finishes the writing handle.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate">
            <summary>
            Audio putput data delegate class
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate.processor">
            <summary>
            Camera capture instance
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate.#ctor(WaveEngine.Adapter.Media.CameraCapture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate"/> class.
            </summary>
            <param name="processor">camera capture processor</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <summary>
            Process sample buffer
            </summary>
            <param name="captureOutput">capture output instance.</param>
            <param name="sampleBuffer">sample buffer.</param>
            <param name="connection">capture connection.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.AudioOutputDataDelegate.SetupAssetWriterAudioInput(CoreMedia.CMFormatDescription)">
            <summary>
            Setup asset writer audio input
            </summary>
            <param name="currentFormatDescription">format description.</param>
            <returns>true if success.</returns>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate">
            <summary>
            Video output data delegate
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate.processor">
            <summary>
            Camera capture instance
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate.#ctor(WaveEngine.Adapter.Media.CameraCapture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate"/> class.
            </summary>
            <param name="processor">camera capture processor</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <summary>
            Process sample buffer
            </summary>
            <param name="captureOutput">capture output instance.</param>
            <param name="sampleBuffer">sample buffer.</param>
            <param name="connection">capture connection.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate.SetupAssetWriterVideoInput(CoreMedia.CMVideoFormatDescription)">
            <summary>
            Setup asset writer video input
            </summary>
            <param name="currentFormatDescription">format description.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.VideoOutputDataDelegate.CalculateFramerateAtTimestamp(CoreMedia.CMTime)">
            <summary>
            Calculate framerate at current timestamp
            </summary>
            <param name="timeStamp">current timestamp</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone">
            <summary>
            Manages a microphone device.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.COUNTAUDIOBUFFERS">
            <summary>
            The COUNTAUDIOBUFFERS
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.AUDIOBUFFERLENGTH">
            <summary>
            The AUDIOBUFFERLENGTH
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.SAMPLERATE">
            <summary>
            The SAMPLERATE
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.BITSPERCHANNEL">
            <summary>
            The BITSPERCHANNEL
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.CHANNELS">
            <summary>
            The CHANNELS
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.Microphone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is recording.
            </summary>
            <value>
            <c>true</c> if this instance is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.CurrentBuffer">
            <summary>
            Gets the current buffer.
            </summary>
            <value>
            The current buffer.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone available.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.buffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordSoundPath">
            <summary>
            The record sound path
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.audioStreamDescription">
            <summary>
            The audio stream description
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.inputQueue">
            <summary>
            The input queue
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.writer">
            <summary>
            The writer
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordFormat">
            <summary>
            The record format
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordedSound">
            <summary>
            The recorded sound
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.isInitialized">
            <summary>
            Microphone is initialized.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.Microphone"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start(System.String)">
            <summary>
            Starts the specified record sound path.
            </summary>
            <param name="recordSoundPath">The record sound path.</param>
            <exception cref="T:System.NotSupportedException">Microphone not available</exception>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Stop">
            <summary>
            Stops the record.
            </summary>
            <exception cref="T:System.NotSupportedException">Microphone not available</exception>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.GetRecordedSound">
            <summary>
            Get a soundbase object
            </summary>
            <returns>
            The recorded sound.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.DestroyRecordedSound">
            <summary>
            Delete the recorded sound ( if any )
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.SetupInputQueue(AudioToolbox.AudioStreamBasicDescription)">
            <summary>
            Setups the input queue.
            </summary>
            <param name="audioStreamDescription">The audio stream description.</param>
            <returns>Audio queue.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.HandleInputCompleted(System.Object,AudioToolbox.InputCompletedEventArgs)">
            <summary>
            Handles the input completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:AudioToolbox.InputCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.WriteToFile(System.Byte[],System.Int32)">
            <summary>
            Writes the current buffer into the WAV file.
            </summary>
            <param name="buffer">Byte buffer of the recorded audio.</param>
            <param name="bytesReaded">Bytes readed on the buffer.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.MusicPlayer">
            <summary>
            Manages music playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.player">
            <summary>
            The player
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.currentVolume">
            <summary>
            The current volume.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.isMuted">
            <summary>
            The is muted.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.playerState">
            <summary>
            The player state
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.MusicPlayer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="song">The song.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.PlaySong(System.String)">
            <summary>
            Plays the song.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.FinishedPlaying(System.Object,AVFoundation.AVStatusEventArgs)">
            <summary>
            Finisheds the playing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:AVFoundation.AVStatusEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.VideoInfo">
            <summary>
            iOS implementation of video info
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoInfo.disposed">
            <summary>
            This instance is disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.Item">
            <summary>
            Gets the AV Player item instance
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.VideoTrack">
            <summary>
            Gets the AV video track
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoInfo.AudioTracks">
            <summary>
            Gets the AV audio tracks
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.VideoInfo"/> class.
            </summary>
            <param name="path">video path.</param>
            <exception cref="T:System.ArgumentException">If video has no suitable tracks</exception>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoInfo.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Adapter.Media.VideoInfo" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoInfo.Dispose">
            <summary>
            Dispose video item
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.VideoPlayer">
            <summary>
            Class used to play videos.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.OneFrameDuration">
            <summary>
            The one frame duration
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.isInitialized">
            <summary>
            Check if the video player is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.video">
            <summary>
            current played video
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.player">
            <summary>
            AV Foundation player 
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.videoTexture">
            <summary>
            Video texture
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.videoTextureCache">
            <summary>
            Video texture cache
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.videoOutput">
            <summary>
            Video output
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.texture">
            <summary>
            Handle for video texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.endNotification">
            <summary>
            The end notification
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.errorNotification">
            <summary>
            The error notification
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.volume">
            <summary>
            The volume
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.isMuted">
            <summary>
            The is muted
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.playPosition">
            <summary>
            Current play position
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.hasNewPosition">
            <summary>
            Has new position
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.newPosition">
            <summary>
            New Position
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.Video">
            <summary>
            Gets the current video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.State">
            <summary>
            Gets the video reproduction state
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.VideoTexture">
            <summary>
            Gets texture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.VideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether Video texture is supported on this device
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.onComplete">
            <summary>
            Internal complete event handler
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.VideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.VideoPlayer.onError">
            <summary>
            Internal error event handler
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.VideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.VideoPlayer"/> class.
            </summary>
            <param name="adapter">iOS adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Initialize">
            <summary>
            Initialize Video player
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Play a video
            </summary>
            <param name="video">the video info to play</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Pause">
            <summary>
            Pause the video 
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Resume">
            <summary>
            Resume a paused video
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Gets video info from path
            </summary>
            <param name="path">video path</param>
            <returns>video info</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Stop">
            <summary>
            Stop the video
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video texture
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.Dispose">
            <summary>
            Dispose video player
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.CheckSupportedVideo">
            <summary>
            Checks the supported video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.InitTexture">
            <summary>
            Inits the texture.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.RefreshPixelBuffer(CoreVideo.CVPixelBuffer)">
            <summary>
            Refreshes the pixel buffer.
            </summary>
            <param name="pixelBuffer">The pixel buffer.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.CleanUpTexture">
            <summary>
            Cleans up texture.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.UpdateVolume">
            <summary>
            Updates the volume.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.VideoPlayer.GetAudioMixFromVolume(System.Single)">
            <summary>
            Gets the audio mix from volume.
            </summary>
            <param name="volume">The volume.</param>
            <returns>Mutable audio mix.</returns>
        </member>
        <member name="T:WaveEngine.Adapter.System.Stopwatch">
            <summary>
            Implements a native stopwatch.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.System.Stopwatch.stopwatch">
            <summary>
            The stopwatch.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.System.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.System.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.System.System">
            <summary>
            Implements system functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.System.System.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.System.System"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.UIInterfaceOrientationExtensions">
            <summary>
            Extensions methods for UIInterfaceOrientation
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.UIInterfaceOrientationExtensions.ToCaptureVideoOrientation(UIKit.UIInterfaceOrientation)">
            <summary>
            Convert Interface Orientation to Video Orientation for Camera capture purposes
            </summary>
            <param name="orientation">interface orientation.</param>
            <returns>capture video orientation.</returns>
        </member>
        <member name="T:WaveEngine.OpenGL.AttributeType">
            <summary>
            GL attribute type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.AttributeType.Uniform">
            <summary>
            Uniform type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.AttributeType.Attribute">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLDepth.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLDepth.DepthHandle">
            <summary>
            Handlde to the OpenGL depth buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.#ctor(WaveEngine.Common.Graphics.IGraphics,WaveEngine.Common.Graphics.DepthTexture,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLRenderTarget"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="texture">The texture.</param>
            <param name="asTexture">Use depth buffer as texture</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLDepth.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.FramebufferId">
            <summary>
            Handlde to the OpenGL framebuffer.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.depthAttachmentHandle">
            <summary>
            Current depth attachment handle
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.textureAttachmentHandles">
            <summary>
            Current texture attachment handles
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.textureAttachmentCount">
            <summary>
            Current texture attachment count
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.depthAsTexture">
            <summary>
            Depth as texture
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.isMRTSupported">
            <summary>
            MRT is supported
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.drawBufferAttachments">
            <summary>
            DrawBuffer method attachments
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.GLFramebuffer.DrawBufferDelegate">
            <summary>
            Delegate that specify the GLDrawBuffer method
            </summary>
            <param name="n">The attachment count</param>
            <param name="attachments">The attachment array</param>
        </member>
        <member name="F:WaveEngine.OpenGL.GLFramebuffer.DrawBufferImplementation">
            <summary>
            Draw buffer implementation
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLFramebuffer.DepthAttachmentHandle">
            <summary>
            Gets or sets the Depth Attachment Handle
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLFramebuffer.TextureAttachmentCount">
            <summary>
            Gets or sets the texture count
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLFramebuffer"/> class.
            </summary>
            <param name="depthAsTexture">Depth as texture</param>
            <param name="isMRTSupported">MRT is supported</param>
            <param name="glVersion">OpenGL ES Version</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLFramebuffer"/> class.
            </summary>
            <param name="framebufferId">The framebuffer id.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.SetColorAttachment(System.Int32,System.UInt32)">
            <summary>
            Set color attachment to the current framebuffer
            </summary>
            <param name="slot">The color attachment slot</param>
            <param name="textureHandle">The attached texture</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.UpdateFramebufferStatus">
            <summary>
            Check Framebuffer Status
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLFramebuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLHelpers">
            <summary>
            Helper OpenGL functions.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLHelpers.lastError">
            <summary>
            Last OpenGL error.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLHelpers.extensions">
            <summary>
            GL Extension dictionary
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.CheckError">
            <summary>
            Checks the error.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.CheckGLExtension(System.String)">
            <summary>
            Checks if an OpenGL Extension is available on the current deviv
            </summary>
            <param name="extension">The OpenGL Extension name</param>
            <returns>True if the extension is avaliable</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.AttributePointerSize(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Attributes the size of the pointer.
            </summary>
            <param name="format">The format.</param>
            <returns>Size in bytes of the attribute.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.IndexCount(WaveEngine.Common.Graphics.PrimitiveType,System.Int32)">
            <summary>
            Calcs the index count.
            </summary>
            <param name="numPrimitives">The num primitives.</param>
            <param name="type">Type of the primitive.</param>
            <returns>Number of primitive indices to draw.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLHelpers.InitExtensionList">
            <summary>
            Initialize extension list
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.GLRenderTarget">
            <summary>
            Implements an OpenGL render target.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.PixelType_Float">
            <summary>
            Original was GL_FLOAT = 0x1406
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.PixelType_HalfFloat">
            <summary>
            Original was GL_HALF_FLOAT = 0x140B
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLRenderTarget.textureHandle">
            <summary>
            Internal texture handle.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.GLRenderTarget.TextureHandle">
            <summary>
            Gets the texture handle.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.#ctor(WaveEngine.Common.Graphics.IGraphics,WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLRenderTarget"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="texture">The texture.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLRenderTarget.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLSLShader">
            <summary>
            Represents an OpenGL shader.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLShader.Techniques">
            <summary>
            Holds the techniques of this shader.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLShader.#ctor(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLSLShader"/> class.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.GLSLTechnique">
            <summary>
            Represents a GLSL technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ShaderLogLength">
            <summary>
            Maximum log length.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.vertexShaderHandle">
            <summary>
            Vertex program handle.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.fragmentShaderHandle">
            <summary>
            Fragment program handle.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.vertexArrayObjects">
            <summary>
            Vertex array objects used by this technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ProgramHandle">
            <summary>
            Handle of the program.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.VertexShaderSource">
            <summary>
            Vertex shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.FragmentShaderSource">
            <summary>
            Fragment shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.MatrixUniforms">
            <summary>
            Matrix uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.ParameterUniforms">
            <summary>
            Parameter uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.TextureUniforms">
            <summary>
            Texture uniform locations.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.Attributes">
            <summary>
            Stores the attributes of the technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.AttributeLocationByUsageName">
            <summary>
            Stores the attributes location.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.GLSLTechnique.VertexBufferFormat">
            <summary>
            The vertex buffer format
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.#ctor(System.String,System.String,WaveEngine.Common.Graphics.Effect,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.GLSLTechnique"/> class.
            </summary>
            <param name="vertexShader">The vertex shader.</param>
            <param name="fragmentShader">The fragment shader.</param>
            <param name="effect">The effect.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.AddAttribute(System.String,WaveEngine.OpenGL.ShaderAttribute)">
            <summary>
            Adds the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.SetVertexArrayObject(System.UInt32,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Sets the vertex array object.
            </summary>
            <param name="vertexBufferHandle">The vertex buffer handle.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.FindVertexElementAttributeLocation(WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Finds the vertex element attribute location.
            </summary>
            <param name="properties">The properties.</param>
            <returns>Location of the attribute, -1 if not found.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.CompileShader(OpenTK.Graphics.ES20.ShaderType,System.String,System.String[])">
            <summary>
            Compiles and return a GLSL shader
            </summary>
            <param name="shaderType">The shader type (VS or PS)</param>
            <param name="shaderSource">Source code of the shader</param>
            <param name="symbols">Precompiled</param>
            <returns></returns>
        </member>
        <member name="M:WaveEngine.OpenGL.GLSLTechnique.FillUniforms(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Fill uniforms info
            </summary>
            <param name="effect">The effect</param>
        </member>
        <member name="T:WaveEngine.OpenGL.Graphics">
            <summary>
            Manages all graphical functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.vertexBufferCount">
            <summary>
            Number of vertex buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.indexBufferCount">
            <summary>
            Number of index buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.shaderManager">
            <summary>
            Reference to the shader manager.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedElementProperties">
            <summary>
            Cached vertex element properties.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.vertexArrayObjects">
            <summary>
            Stored vertex array objects.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedClearColor">
            <summary>
            Cached clear color.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.Graphics.cachedClearDepth">
            <summary>
            Cached clear depth.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.GLVersion">
            <summary>
            OpenGL version used in this application
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.Graphics.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.#ctor(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.Graphics"/> class.
            </summary>
            <param name="glVersion">OpenGL Version</param>
            <param name="screenWidth">The screen width.</param>
            <param name="screenHeight">The screen height.</param>
            <param name="framebufferId">The screen framebuffer ID.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="flags">The flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CreateVertexBufferHandle">
            <summary>
            Creates the vertex buffer handle.
            </summary>
            <returns>Vertex buffer handle</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CacheBindVertexBuffer(System.UInt32)">
            <summary>
            Caches the bind vertex buffer.
            </summary>
            <param name="vertexBufferHandle">The vertex buffer handle.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.Graphics.CacheBindIndexBuffer(System.UInt32)">
            <summary>
            Caches the bind index buffer.
            </summary>
            <param name="indexBufferHandle">The index buffer handle.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.RenderState">
            <summary>
            Manages the current render state.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.graphics">
            <summary>
            The graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.cullMode">
            <summary>
            Current cull mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.blendMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.fillMode">
            <summary>
            Current fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthBias">
            <summary>
            The depth bias.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.samplerMode">
            <summary>
            Current sampler mode.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthTestEnabled">
            <summary>
            Holds if depth test is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.blendEnabled">
            <summary>
            Holds if blend is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.depthMaskEnabled">
            <summary>
            Hold if depth mask is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldDepthFunc">
            <summary>
            Old depth function.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldBlendSrc">
            <summary>
            Old blend source.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.oldBlendDst">
            <summary>
            Old blend destination.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.viewport">
            <summary>
            Current viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.defaultViewport">
            <summary>
            Default viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.scissorTestEnabled">
            <summary>
            The scissor test enabled
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderState.scissorRectangle">
            <summary>
            The scissor rectangle
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>The depth bias.</value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.FillMode">
            <summary>
            Gets or sets the Fill mode.
            </summary>
            <value>
            The Fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.SamplerMode">
            <summary>
            Gets or sets the address mode.
            </summary>
            <value>
            The address mode.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderState.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.RenderState"/> class.
            </summary>
            <param name="adapter">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.RenderTargetManager">
            <summary>
            Manages render targets.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_texture_half_float">
            <summary>
            Name of GL_OES_texture_half_float extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_texture_float">
            <summary>
            Name of GL_OES_texture_float extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_NV_draw_buffers">
            <summary>
            NVidia OpenGL extension that allow MRT on OpenGL ES 2.0 devices
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_OES_depth_texture">
            <summary>
            Name of GL_OES_depth_texture extension
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.GL_MAX_COLOR_ATTACHMENTS">
            <summary>
            GL_MAX_COLOR_ATTACHMENTS const
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.defaultDepthTexture">
            <summary>
            The default depth texture
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.disposed">
            <summary>
            Holds if the render target is disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.screenFramebuffer">
            <summary>
            The adapter screen framebuffer
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.offScreenFramebuffer">
            <summary>
            The offscreen framebuffer;
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.currentFramebufferId">
            <summary>
            Current framebuffer ID
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.renderTargetCount">
            <summary>
            Number of render targets created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.depthTextureCount">
            <summary>
            Number of depth texture created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.graphics">
            <summary>
            The Graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.hasFloatTextureSupport">
            <summary>
            Has Float texture support
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.RenderTargetManager.hasHalfFloatTextureSupport">
            <summary>
            Has HalfFloat texture support
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.RenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.#ctor(WaveEngine.OpenGL.Graphics,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.RenderTargetManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="screenFramebufferId">The framebuffer ID handle</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depth texture</param>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Render target.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.RenderTargetManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderAttribute">
            <summary>
            Represents a shader attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Format">
            <summary>
            Format of the attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Usage">
            <summary>
            Usage of the attribute.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.UsageIndex">
            <summary>
            Attribute usage index.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderAttribute.Location">
            <summary>
            Attribute location in shader.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderAttribute.#ctor(WaveEngine.Common.Graphics.VertexElementFormat,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderAttribute"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="usage">The usage.</param>
            <param name="usageIndex">Index of the usage.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderManager">
            <summary>
            Creates and manages shaders.
            </summary>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderManager.OffsetMap">
            <summary>
            Class for mapping offsets.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.UniformName">
            <summary>
            The uniform name
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.OffsetMap.FieldType">
            <summary>
            The field type
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.DefaultLookupIndex">
            <summary>
            Default lookup table index. This is used for all normal textures. Texture 2D, Texture Cube...
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.CubeMapLookupIndex">
            <summary>
            Lookup id for render target textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.RenderTargetLookupIndex">
            <summary>
            Lookup id for render target textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.VideoTextureLookupIndex">
            <summary>
            Lookup id for video textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.DepthTextureLookupIndex">
            <summary>
            Lookup id for depth textures
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.ActiveShader">
            <summary>
            Current active shader.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.addressModeLokupTable">
            <summary>
            Address mode lookup table
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.graphics">
            <summary>
            The Graphics API.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.effects">
            <summary>
            Loaded shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.offsetMappings">
            <summary>
            The offset mappings
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector2Hash">
            <summary>
            The vector2 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector3Hash">
            <summary>
            The vector3 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.vector4Hash">
            <summary>
            The vector4 hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.matrixHash">
            <summary>
            The matrix hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.floatHash">
            <summary>
            The float hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.intHash">
            <summary>
            The int hash
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.currentTechnique">
            <summary>
            Currently used technique.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.cachedTechnique">
            <summary>
            The chached technique
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderManager.cachedMaterial">
            <summary>
            The cached material
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.OpenGL.ShaderManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateAddressLookupTable">
            <summary>
            Create the Adress mode lookup table
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>
            true if the technique exists.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the effect.
            </summary>
            <param name="effect">The effect.</param>        
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.ResetCachedMaterial">
            <summary>
            Resets the cached material.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CacheUseProgram(WaveEngine.OpenGL.GLSLTechnique)">
            <summary>
            Caches the use program.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetShaderMatrices(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Sets the shader matrices.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.SetParameters(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.CreateObjectOffsetMap(System.Object)">
            <summary>
            Maps the struct fields.
            </summary>
            <param name="targetObject">The target object.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderManager.GetObjectMappedFields(System.Object,System.String,System.Int32)">
            <summary>
            Gets the object mapped fields.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="fieldPrefix">The field prefix.</param>
            <param name="fieldOffset">The field offset.</param>
            <returns>List of offset maps</returns>
        </member>
        <member name="T:WaveEngine.OpenGL.ShaderUniform">
            <summary>
            Represents a shader uniform.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.Location">
            <summary>
            The location
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.matrixValue">
            <summary>
            The matrix value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec2Value">
            <summary>
            The vec2 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec3Value">
            <summary>
            The vec3 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.vec4Value">
            <summary>
            The vec4 value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.intValue">
            <summary>
            The int value
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.ShaderUniform.floatValue">
            <summary>
            The float value
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.ShaderUniform"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Matrix*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector2*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector3*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(WaveEngine.Common.Math.Vector4*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Int32*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Int32)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.ShaderUniform.SetValue(System.Single*)">
            <summary>
            Sets the value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.SoundManager">
            <summary>
            Manages everything related to sounds.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.WavHeaderSize">
            <summary>
            WAV Header size (in bytes)
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.WavOffset">
            <summary>
            WAV file End offset
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.soundCount">
            <summary>
            Number of sounds created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.instanceCount">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.lastError">
            <summary>
            OpenAL error instance.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.references">
            <summary>
            Dictionary of sound references.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.pendingResumeInstances">
            <summary>
            The pending resume instances
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.device">
            <summary>
            Audio device.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.context">
            <summary>
            Audio context.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.soundLock">
            <summary>
            Lock for sound uploading.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.isPaused">
            <summary>
            The Sound Manager is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.SoundManager.tempListenerOrientation">
            <summary>
            Temporal 3d orientation vector used to store listener orientation
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.SoundManager.SoundHandles">
            <summary>
            Gets the dictionary of sound handles.
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.SoundManager.InstanceHandles">
            <summary>
            Gets the dictionary of instance handles.
            </summary>
            <value>
            The instance handles.
            </value>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:WaveEngine.Adapter.SoundManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the sound instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the sound instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.CheckError">
            <summary>
            Checks for OpenAL errors.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.HandleEndInterruption(Foundation.NSNotification)">
            <summary>
            Handles the end interruption.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.SoundManager.HandleBeginInterruption(Foundation.NSNotification)">
            <summary>
            Handles the begin interruption.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="T:WaveEngine.OpenGL.TextureManager">
            <summary>
            Handles texture management.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.Etc1Rgb8Oes">
            <summary>
            Represent Android.Opengl.ETC1.Etc1Rgb8Oes
            </summary>
        </member>
        <member name="P:WaveEngine.OpenGL.TextureManager.TextureHandles">
            <summary>
            Gets the texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.textureCount">
            <summary>
            Number of textures created.
            </summary>
        </member>
        <member name="F:WaveEngine.OpenGL.TextureManager.graphics">
            <summary>
            The graphics API.
            </summary>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.#ctor(WaveEngine.OpenGL.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.OpenGL.TextureManager"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Tyep of the returned texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Texture from handle.</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.OpenGL.TextureManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged  resources.
            </summary>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver">
            <summary>
            Payment observer
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.inAppPurchase">
            <summary>
            InApp purchase implementation
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.requestProductsSemaphore">
            <summary>
            The request products semaphore
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.restorePurchasesResult">
            <summary>
            Restore purchase task result
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.purchaseProductTaskResult">
            <summary>
            Task result used to get completion request
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.#ctor(WaveEngineiOS.Adapter.Guide.InAppPurchase)">
            <summary>
            Initializes a new instance of the <see cref="N:WaveEngineiOS.Adapter"/> class.
            </summary>
            <param name="manager">InApp purchase</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.RequestProductPurchaseAsync(System.String)">
            <summary>
            Request product purchase async
            </summary>
            <param name="productId">Product Id.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.UpdatedTransactions(StoreKit.SKPaymentQueue,StoreKit.SKPaymentTransaction[])">
            <summary>
            Called when the transaction status is updated
            </summary>
            <param name="queue">Payment queue</param>
            <param name="transactions">Transactions to update</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.RestoreCompletedTransactionsFinished(StoreKit.SKPaymentQueue)">
            <summary>
            Restore complete OK
            </summary>
            <param name="queue">Payment queue</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.RestoreCompletedTransactionsFailedWithError(StoreKit.SKPaymentQueue,Foundation.NSError)">
            <summary>
            Restore complete failed
            </summary>
            <param name="queue">Payment queue</param>
            <param name="error">Error message</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.PaymentQueueRestoreCompleted(System.Boolean)">
            <summary>
            Payment queue is restored
            </summary>
            <param name="isOk">The transaction isOks</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.CompleteTransaction(StoreKit.SKPaymentTransaction)">
            <summary>
            The current transaction has been completed OK
            </summary>
            <param name="transaction">The purchase transaction</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.FailedTransaction(StoreKit.SKPaymentTransaction)">
            <summary>
            The current transaction has been failed
            </summary>
            <param name="transaction">The purchase transaction</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPaymentObserver.RestoreTransaction(StoreKit.SKPaymentTransaction)">
            <summary>
            A previous transaction has been restored
            </summary>
            <param name="transaction">The purchase transaction</param>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Guide.InAppProductsRequestDelegate">
            <summary>
            Products request delegate
            </summary>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Guide.InAppProductsRequestDelegate.ReceivedResponseHandle">
            <summary>
            Delegate method for receiving response
            </summary>
            <param name="request">The request</param>
            <param name="response">The response</param>
        </member>
        <member name="E:WaveEngineiOS.Adapter.Guide.InAppProductsRequestDelegate.OnReceivedResponse">
            <summary>
            An event that is fired when a response is received
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppProductsRequestDelegate.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)">
            <summary>
            Receive response
            </summary>
            <param name="request">Product request</param>
            <param name="response">Product response</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppProductsRequestDelegate.Dispose(System.Boolean)">
            <summary>
            Dispose unmannaged resources
            </summary>
            <param name="disposing">Dispose managed resources</param>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Guide.Mapper">
            <summary>
            InApp Purchase Implementation class
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.Mapper.LocalizedPrice(StoreKit.SKProduct)">
            <summary>
            Obtains the localized price 
            </summary>
            <param name="product">The product</param>
            <returns>The localized price</returns>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Guide.InAppPurchase">
            <summary>
            InApp Purchase Implementation class
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPurchase.paymentObserver">
            <summary>
            The payment observer
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Guide.InAppPurchase.receiptDictionary">
            <summary>
            Receipt dictionary
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>If the store is</returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">List of products to obtain the details</param>
            <returns>Detailed product list</returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.RequestProductPurchaseAsync(System.String)">
            <summary>
            Request product purchase async
            </summary>
            <param name="productId">Product Id.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.RequestReceiptAsync(System.String)">
            <summary>
            Request receipt
            </summary>
            <param name="productId">Product Id.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.ReportConsumablePurchased(System.String)">
            <summary>
            Report consumable purchased
            </summary>
            <param name="productId">Product Id.</param>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.Dispose">
            <summary>
            The current transaction has been completed OK
            </summary>        
        </member>
        <member name="M:WaveEngineiOS.Adapter.Guide.InAppPurchase.RefreshReceipt(System.String)">
            <summary>
            Refresh the receipt
            </summary>
            <param name="productId">the product Id</param>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Input.MotionSensorListener">
            <summary>
            Motion Listener class
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.motionManager">
            <summary>
            The motion manager
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.changeOrientationFix">
            <summary>
            Orientation fix quaternion
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.initialOrientationFix">
            <summary>
            Orientation fix quaternion
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.MotionSensorListener.initialOrientation">
            <summary>
            Initial orientation
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.#ctor(CoreMotion.CMMotionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineiOS.Adapter.Input.MotionSensorListener"/> class.
            </summary>
            <param name="motionManager">The location manager.</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.MotionSensorListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Input.GyroscopeListener">
            <summary>
            Gyroscope Listener class
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.GyroscopeListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.GyroscopeListener.motionManager">
            <summary>
            The motion manager
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.GyroscopeListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.#ctor(CoreMotion.CMMotionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineiOS.Adapter.Input.GyroscopeListener"/> class.
            </summary>
            <param name="motionManager">The location manager.</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.GyroscopeListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngineiOS.Adapter.Input.CompassListener">
            <summary>
            Compass Listener class
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.CompassListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.CompassListener.locationManager">
            <summary>
            The motion manager
            </summary>
        </member>
        <member name="F:WaveEngineiOS.Adapter.Input.CompassListener.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.#ctor(CoreLocation.CLLocationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngineiOS.Adapter.Input.CompassListener"/> class.
            </summary>
            <param name="locationManager">The location manager.</param>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngineiOS.Adapter.Input.CompassListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
    </members>
</doc>
